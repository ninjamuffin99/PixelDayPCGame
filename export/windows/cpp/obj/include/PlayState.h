// Generated by Haxe 3.4.4
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(ChatWindow)
HX_DECLARE_CLASS0(ErrorWindow)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(Window)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x46c2835d };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static hx::ObjectPtr< PlayState_obj > __new( ::Dynamic MaxSize);
		static hx::ObjectPtr< PlayState_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46"); }

		static void __boot();
		static bool playedMusic;
		 ::flixel::group::FlxTypedGroup grpWindows;
		 ::ChatWindow chatWindow;
		 ::ErrorWindow testWindow;
		 ::ErrorWindow testWin2;
		 ::flixel::FlxSprite taskbar;
		 ::flixel::group::FlxTypedGroup grpTaskbar;
		 ::flixel::group::FlxTypedGroup grpShortcuts;
		 ::flixel::text::FlxText clock;
		void create();

		void addShortcuts();
		::Dynamic addShortcuts_dyn();

		void clickTwitter();
		::Dynamic clickTwitter_dyn();

		void clickChat();
		::Dynamic clickChat_dyn();

		void clickReadme();
		::Dynamic clickReadme_dyn();

		void addOverlayEffects();
		::Dynamic addOverlayEffects_dyn();

		Float BSODTimer;
		void update(Float elapsed);

		int pressSteps;
		void checkMouse( ::Window w);
		::Dynamic checkMouse_dyn();

		void initTaskBar( ::Window w);
		::Dynamic initTaskBar_dyn();

		void moveWindows( ::Window w);
		::Dynamic moveWindows_dyn();

};


#endif /* INCLUDED_PlayState */ 
