// Generated by Haxe 3.4.4
#ifndef INCLUDED_Window
#define INCLUDED_Window

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS0(Window)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxSpriteButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)



class HXCPP_CLASS_ATTRIBUTES Window_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef Window_obj OBJ_;
		Window_obj();

	public:
		enum { _hx_ClassId = 0x03e5ced8 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Window")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Window"); }
		static hx::ObjectPtr< Window_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color);
		static hx::ObjectPtr< Window_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Window_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Window","\x10","\x08","\x21","\x87"); }

		 ::flixel::text::FlxText title;
		 ::flixel::FlxSprite outLine;
		 ::flixel::FlxSprite topBar;
		 ::flixel::FlxSprite topBarOutline;
		 ::flixel::FlxSprite backGround;
		 ::flixel::ui::FlxSpriteButton closeButton;
		 ::flixel::ui::FlxSpriteButton minimizeButton;
		virtual void update(Float elapsed);

		void kill();

		bool mousePressing;
		 ::flixel::math::FlxPoint mouseOffset;
		void winDragSet( ::flixel::FlxSprite _);
		::Dynamic winDragSet_dyn();

		bool pressDown;
		void onDown( ::Dynamic _);
		::Dynamic onDown_dyn();

		void closeWindow();
		::Dynamic closeWindow_dyn();

		void minimizeWindow();
		::Dynamic minimizeWindow_dyn();

};


#endif /* INCLUDED_Window */ 
