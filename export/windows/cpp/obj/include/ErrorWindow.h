// Generated by Haxe 3.4.4
#ifndef INCLUDED_ErrorWindow
#define INCLUDED_ErrorWindow

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Window
#include <Window.h>
#endif
HX_DECLARE_CLASS0(ErrorWindow)
HX_DECLARE_CLASS0(Window)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES ErrorWindow_obj : public  ::Window_obj
{
	public:
		typedef  ::Window_obj super;
		typedef ErrorWindow_obj OBJ_;
		ErrorWindow_obj();

	public:
		enum { _hx_ClassId = 0x252c71b8 };

		void __construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ErrorWindow")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"ErrorWindow"); }
		static hx::ObjectPtr< ErrorWindow_obj > __new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color);
		static hx::ObjectPtr< ErrorWindow_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ErrorWindow_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ErrorWindow","\xb8","\x71","\x2c","\x25"); }

		 ::flixel::text::FlxText errorText;
		void updateText(::String text);
		::Dynamic updateText_dyn();

};


#endif /* INCLUDED_ErrorWindow */ 
