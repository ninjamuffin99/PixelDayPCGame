// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_BSOD
#include <BSOD.h>
#endif
#ifndef INCLUDED_ChatWindow
#include <ChatWindow.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_ErrorWindow
#include <ErrorWindow.h>
#endif
#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_OSOPal
#include <OSOPal.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_TaskbarButton
#include <TaskbarButton.h>
#endif
#ifndef INCLUDED_Window
#include <Window.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_Lib
#include <openfl/_legacy/Lib.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_BlendMode
#include <openfl/_legacy/display/BlendMode.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_19_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",19,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_36_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",36,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_84_addShortcuts,"PlayState","addShortcuts",0xc23c547d,"PlayState.addShortcuts","PlayState.hx",84,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_99_clickTwitter,"PlayState","clickTwitter",0x3ba97ebc,"PlayState.clickTwitter","PlayState.hx",99,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_103_clickChat,"PlayState","clickChat",0x5d118eef,"PlayState.clickChat","PlayState.hx",103,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_109_clickReadme,"PlayState","clickReadme",0x34e15005,"PlayState.clickReadme","PlayState.hx",109,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_115_addOverlayEffects,"PlayState","addOverlayEffects",0x32f283c2,"PlayState.addOverlayEffects","PlayState.hx",115,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_138_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",138,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_163_checkMouse,"PlayState","checkMouse",0xa86d8dae,"PlayState.checkMouse","PlayState.hx",163,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_172_initTaskBar,"PlayState","initTaskBar",0xe0117fcd,"PlayState.initTaskBar","PlayState.hx",172,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_170_initTaskBar,"PlayState","initTaskBar",0xe0117fcd,"PlayState.initTaskBar","PlayState.hx",170,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_180_moveWindows,"PlayState","moveWindows",0xca3f64e1,"PlayState.moveWindows","PlayState.hx",180,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_33_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",33,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_19_new)
HXLINE( 160)		this->pressSteps = (int)0;
HXLINE( 135)		this->BSODTimer = ::flixel::FlxG_obj::random->_hx_float((int)1,(int)60,null());
HXLINE(  19)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_36_create)
HXLINE(  38)		::flixel::FlxG_obj::mouse->load(HX_("assets/images/cursor.png",7c,8a,a0,3f),(int)2,null(),null());
HXLINE(  39)		::flixel::FlxG_obj::camera->fade((int)-16777216,(int)7,true,null(),null());
HXLINE(  41)		this->grpShortcuts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  42)		this->add(this->grpShortcuts);
HXLINE(  44)		this->addShortcuts();
HXLINE(  46)		this->grpWindows =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  47)		this->add(this->grpWindows);
HXLINE(  49)		this->chatWindow =  ::ChatWindow_obj::__alloc( HX_CTX ,(int)10,(int)10,(int)256,(int)200,HX_("Cache corruptor v1.0.3",30,cd,db,8e),null());
HXLINE(  50)		this->grpWindows->add(this->chatWindow).StaticCast<  ::Window >();
HXLINE(  51)		this->chatWindow->kill();
HXLINE(  53)		this->testWindow =  ::ErrorWindow_obj::__alloc( HX_CTX ,(int)100,(int)50,(int)200,(int)100,HX_("WARNING",3c,ae,9f,89),null());
HXLINE(  54)		this->testWindow->updateText(HX_("WARNING: FlixOS has booted into compatibility mode due to harddrive instability. Depending on severity, some programs may not have laoded correctly",b0,c1,3b,7d));
HXLINE(  55)		this->grpWindows->add(this->testWindow).StaticCast<  ::Window >();
HXLINE(  57)		this->testWin2 =  ::ErrorWindow_obj::__alloc( HX_CTX ,(int)40,(int)70,(int)200,(int)200,HX_("creds.txt",67,51,4f,c5),null());
HXLINE(  58)		this->testWin2->errorText->set_text(HX_("A game by Cameron Taylor. Made for Pixel Day 2018 on Newgrounds.com in about 2 weeks. Used HaxeFlixel, Aseprite. \nMusic: \"bumble bee\" - Zion Toporowski \nSounds are from various free online places",4c,13,54,56));
HXLINE(  59)		this->testWin2->kill();
HXLINE(  60)		this->grpWindows->add(this->testWin2).StaticCast<  ::Window >();
HXLINE(  62)		int taskH = (int)16;
HXLINE(  63)		this->taskbar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(::flixel::FlxG_obj::height - taskH),null());
HXLINE(  64)		this->taskbar->makeGraphic(::flixel::FlxG_obj::width,(int)1,::OSOPal_obj::lightPink,null(),null());
HXLINE(  65)		this->add(this->taskbar);
HXLINE(  67)		this->grpTaskbar =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  68)		this->add(this->grpTaskbar);
HXLINE(  73)		 ::Date current_date = ::Date_obj::now();
HXLINE(  74)		int _hx_tmp = (::flixel::FlxG_obj::width - (int)50);
HXDLIN(  74)		Float _hx_tmp1 = this->taskbar->y;
HXDLIN(  74)		::String _hx_tmp2 = ((current_date->getMonth() + (int)1) + HX_("/",2f,00,00,00));
HXDLIN(  74)		::String _hx_tmp3 = ((_hx_tmp2 + current_date->getDate()) + HX_("/",2f,00,00,00));
HXDLIN(  74)		this->clock =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,(int)0,(_hx_tmp3 + current_date->getFullYear()),null(),null());
HXLINE(  75)		this->clock->set_color(::OSOPal_obj::darkPurple);
HXLINE(  76)		this->add(this->clock);
HXLINE(  80)		this->super::create();
            	}


void PlayState_obj::addShortcuts(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_84_addShortcuts)
HXLINE(  85)		 ::File file =  ::File_obj::__alloc( HX_CTX ,(int)8,(int)70,HX_("assets/images/twitter.png",63,fb,d0,e3),this->clickTwitter_dyn(),HX_("@ninja_muffin99",c2,0a,47,66),::OSOPal_obj::darkPurple);
HXLINE(  86)		this->grpShortcuts->add(file).StaticCast<  ::File >();
HXLINE(  89)		 ::File chatShortcut =  ::File_obj::__alloc( HX_CTX ,(int)8,(int)8,HX_("assets/images/chat.png",be,42,3c,73),this->clickChat_dyn(),HX_("ChatCorruptor",18,7c,b8,b0),::OSOPal_obj::darkPurple);
HXLINE(  90)		this->grpShortcuts->add(chatShortcut).StaticCast<  ::File >();
HXLINE(  92)		 ::File readme =  ::File_obj::__alloc( HX_CTX ,(int)8,(int)88,HX_("assets/images/TXT.png",40,73,c6,42),this->clickReadme_dyn(),HX_("creds.txt",67,51,4f,c5),::OSOPal_obj::darkPurple);
HXLINE(  93)		this->grpShortcuts->add(readme).StaticCast<  ::File >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,addShortcuts,(void))

void PlayState_obj::clickTwitter(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_99_clickTwitter)
HXDLIN(  99)		::String prefix = HX_("",00,00,00,00);
HXDLIN(  99)		if (!( ::EReg_obj::__alloc( HX_CTX ,HX_("^https?://",48,ee,dd,38),HX_("",00,00,00,00))->match(HX_("https://twitter.com/ninja_muffin99",7a,ac,b6,89)))) {
HXDLIN(  99)			prefix = HX_("http://",52,75,cd,5a);
            		}
HXDLIN(  99)		::openfl::_legacy::Lib_obj::getURL( ::openfl::_legacy::net::URLRequest_obj::__alloc( HX_CTX ,(prefix + HX_("https://twitter.com/ninja_muffin99",7a,ac,b6,89))),HX_("_blank",95,26,d9,b0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,clickTwitter,(void))

void PlayState_obj::clickChat(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_103_clickChat)
HXLINE( 104)		this->chatWindow->revive();
HXLINE( 105)		this->checkMouse(this->chatWindow);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,clickChat,(void))

void PlayState_obj::clickReadme(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_109_clickReadme)
HXLINE( 110)		this->testWin2->revive();
HXLINE( 111)		this->checkMouse(this->testWin2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,clickReadme,(void))

void PlayState_obj::addOverlayEffects(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_115_addOverlayEffects)
HXLINE( 116)		 ::flixel::FlxSprite scanLines =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE( 118)		scanLines->loadGraphic(HX_("assets/images/scanlines08.jpg",12,11,da,d6),false,(int)830,(int)552,null(),null());
HXLINE( 121)		scanLines->set_blend(::openfl::_legacy::display::BlendMode_obj::MULTIPLY_dyn());
HXLINE( 122)		scanLines->set_alpha(((Float)0.1));
HXLINE( 123)		this->add(scanLines);
HXLINE( 125)		 ::flixel::FlxSprite vig =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE( 127)		vig->loadGraphic(HX_("assets/images/vignette.png",20,ef,11,da),false,(int)1920,(int)1080,null(),null());
HXLINE( 128)		vig->setGraphicSize(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height);
HXLINE( 129)		vig->updateHitbox();
HXLINE( 130)		vig->set_blend(::openfl::_legacy::display::BlendMode_obj::MULTIPLY_dyn());
HXLINE( 131)		vig->set_alpha(((Float)0.4));
HXLINE( 132)		this->add(vig);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,addOverlayEffects,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_138_update)
HXLINE( 139)		this->super::update(elapsed);
HXLINE( 141)		if ((this->chatWindow->aliveNum == (int)1)) {
HXLINE( 143)			 ::PlayState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 143)			_hx_tmp->BSODTimer = (_hx_tmp->BSODTimer - ::flixel::FlxG_obj::elapsed);
HXLINE( 144)			if ((this->BSODTimer <= (int)0)) {
HXLINE( 146)				 ::flixel::FlxState nextState =  ::BSOD_obj::__alloc( HX_CTX ,null());
HXDLIN( 146)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 146)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 150)		this->grpWindows->forEachAlive(this->checkMouse_dyn(),null());
HXLINE( 154)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)2)) {
HXLINE( 155)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 155)			_hx_tmp1->play(((HX_("assets/sounds/mouseP",ea,25,5b,ce) + ::flixel::FlxG_obj::random->_hx_int((int)0,(int)2,null())) + HX_(".mp3",02,e8,ba,1e)),((Float)0.6),null(),null(),null(),null());
            		}
HXLINE( 156)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)-1)) {
HXLINE( 157)			::flixel::FlxG_obj::sound->play(HX_("assets/sounds/mouseR.mp3",ee,73,9d,6c),((Float)0.6),null(),null(),null(),null());
            		}
            	}


void PlayState_obj::checkMouse( ::Window w){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_163_checkMouse)
HXDLIN( 163)		if (w->mousePressing) {
HXLINE( 165)			this->moveWindows(w);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkMouse,(void))

void PlayState_obj::initTaskBar( ::Window w){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Window,w) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_172_initTaskBar)
HXLINE( 173)			w->set_visible(!(w->visible));
HXLINE( 174)			_gthis->moveWindows(w);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_170_initTaskBar)
HXLINE( 169)		 ::PlayState _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 171)		 ::TaskbarButton taskButton =  ::TaskbarButton_obj::__alloc( HX_CTX ,((int)17 * this->grpTaskbar->members->get_length()),this->taskbar->y, ::Dynamic(new _hx_Closure_0(_gthis,w)));
HXLINE( 176)		this->grpTaskbar->add(taskButton).StaticCast<  ::TaskbarButton >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,initTaskBar,(void))

void PlayState_obj::moveWindows( ::Window w){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_180_moveWindows)
HXLINE( 181)		this->grpWindows->members->remove(w);
HXLINE( 182)		this->grpWindows->members->push(w);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,moveWindows,(void))

bool PlayState_obj::playedMusic;


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(grpWindows,"grpWindows");
	HX_MARK_MEMBER_NAME(chatWindow,"chatWindow");
	HX_MARK_MEMBER_NAME(testWindow,"testWindow");
	HX_MARK_MEMBER_NAME(testWin2,"testWin2");
	HX_MARK_MEMBER_NAME(taskbar,"taskbar");
	HX_MARK_MEMBER_NAME(grpTaskbar,"grpTaskbar");
	HX_MARK_MEMBER_NAME(grpShortcuts,"grpShortcuts");
	HX_MARK_MEMBER_NAME(clock,"clock");
	HX_MARK_MEMBER_NAME(BSODTimer,"BSODTimer");
	HX_MARK_MEMBER_NAME(pressSteps,"pressSteps");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(grpWindows,"grpWindows");
	HX_VISIT_MEMBER_NAME(chatWindow,"chatWindow");
	HX_VISIT_MEMBER_NAME(testWindow,"testWindow");
	HX_VISIT_MEMBER_NAME(testWin2,"testWin2");
	HX_VISIT_MEMBER_NAME(taskbar,"taskbar");
	HX_VISIT_MEMBER_NAME(grpTaskbar,"grpTaskbar");
	HX_VISIT_MEMBER_NAME(grpShortcuts,"grpShortcuts");
	HX_VISIT_MEMBER_NAME(clock,"clock");
	HX_VISIT_MEMBER_NAME(BSODTimer,"BSODTimer");
	HX_VISIT_MEMBER_NAME(pressSteps,"pressSteps");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clock") ) { return hx::Val( clock ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"taskbar") ) { return hx::Val( taskbar ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testWin2") ) { return hx::Val( testWin2 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"clickChat") ) { return hx::Val( clickChat_dyn() ); }
		if (HX_FIELD_EQ(inName,"BSODTimer") ) { return hx::Val( BSODTimer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpWindows") ) { return hx::Val( grpWindows ); }
		if (HX_FIELD_EQ(inName,"chatWindow") ) { return hx::Val( chatWindow ); }
		if (HX_FIELD_EQ(inName,"testWindow") ) { return hx::Val( testWindow ); }
		if (HX_FIELD_EQ(inName,"grpTaskbar") ) { return hx::Val( grpTaskbar ); }
		if (HX_FIELD_EQ(inName,"pressSteps") ) { return hx::Val( pressSteps ); }
		if (HX_FIELD_EQ(inName,"checkMouse") ) { return hx::Val( checkMouse_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clickReadme") ) { return hx::Val( clickReadme_dyn() ); }
		if (HX_FIELD_EQ(inName,"initTaskBar") ) { return hx::Val( initTaskBar_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveWindows") ) { return hx::Val( moveWindows_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpShortcuts") ) { return hx::Val( grpShortcuts ); }
		if (HX_FIELD_EQ(inName,"addShortcuts") ) { return hx::Val( addShortcuts_dyn() ); }
		if (HX_FIELD_EQ(inName,"clickTwitter") ) { return hx::Val( clickTwitter_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addOverlayEffects") ) { return hx::Val( addOverlayEffects_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"playedMusic") ) { outValue = ( playedMusic ); return true; }
	}
	return false;
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clock") ) { clock=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"taskbar") ) { taskbar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"testWin2") ) { testWin2=inValue.Cast<  ::ErrorWindow >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"BSODTimer") ) { BSODTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpWindows") ) { grpWindows=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chatWindow") ) { chatWindow=inValue.Cast<  ::ChatWindow >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testWindow") ) { testWindow=inValue.Cast<  ::ErrorWindow >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpTaskbar") ) { grpTaskbar=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pressSteps") ) { pressSteps=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"grpShortcuts") ) { grpShortcuts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"playedMusic") ) { playedMusic=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("grpWindows","\x1e","\xf1","\x4e","\x09"));
	outFields->push(HX_HCSTRING("chatWindow","\xe8","\x18","\xd7","\x19"));
	outFields->push(HX_HCSTRING("testWindow","\xe2","\xd9","\x80","\x6b"));
	outFields->push(HX_HCSTRING("testWin2","\x08","\xf6","\x2a","\x52"));
	outFields->push(HX_HCSTRING("taskbar","\xae","\x0b","\x71","\x1e"));
	outFields->push(HX_HCSTRING("grpTaskbar","\x49","\x1e","\x4b","\x3f"));
	outFields->push(HX_HCSTRING("grpShortcuts","\x88","\xee","\x2a","\x41"));
	outFields->push(HX_HCSTRING("clock","\xce","\x09","\x63","\x48"));
	outFields->push(HX_HCSTRING("BSODTimer","\xbf","\x70","\x5f","\x96"));
	outFields->push(HX_HCSTRING("pressSteps","\x24","\xfd","\x66","\x61"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpWindows),HX_HCSTRING("grpWindows","\x1e","\xf1","\x4e","\x09")},
	{hx::fsObject /*::ChatWindow*/ ,(int)offsetof(PlayState_obj,chatWindow),HX_HCSTRING("chatWindow","\xe8","\x18","\xd7","\x19")},
	{hx::fsObject /*::ErrorWindow*/ ,(int)offsetof(PlayState_obj,testWindow),HX_HCSTRING("testWindow","\xe2","\xd9","\x80","\x6b")},
	{hx::fsObject /*::ErrorWindow*/ ,(int)offsetof(PlayState_obj,testWin2),HX_HCSTRING("testWin2","\x08","\xf6","\x2a","\x52")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,taskbar),HX_HCSTRING("taskbar","\xae","\x0b","\x71","\x1e")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpTaskbar),HX_HCSTRING("grpTaskbar","\x49","\x1e","\x4b","\x3f")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,grpShortcuts),HX_HCSTRING("grpShortcuts","\x88","\xee","\x2a","\x41")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,clock),HX_HCSTRING("clock","\xce","\x09","\x63","\x48")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,BSODTimer),HX_HCSTRING("BSODTimer","\xbf","\x70","\x5f","\x96")},
	{hx::fsInt,(int)offsetof(PlayState_obj,pressSteps),HX_HCSTRING("pressSteps","\x24","\xfd","\x66","\x61")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &PlayState_obj::playedMusic,HX_HCSTRING("playedMusic","\x52","\x68","\x3a","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("grpWindows","\x1e","\xf1","\x4e","\x09"),
	HX_HCSTRING("chatWindow","\xe8","\x18","\xd7","\x19"),
	HX_HCSTRING("testWindow","\xe2","\xd9","\x80","\x6b"),
	HX_HCSTRING("testWin2","\x08","\xf6","\x2a","\x52"),
	HX_HCSTRING("taskbar","\xae","\x0b","\x71","\x1e"),
	HX_HCSTRING("grpTaskbar","\x49","\x1e","\x4b","\x3f"),
	HX_HCSTRING("grpShortcuts","\x88","\xee","\x2a","\x41"),
	HX_HCSTRING("clock","\xce","\x09","\x63","\x48"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("addShortcuts","\xcc","\xe0","\x06","\xa7"),
	HX_HCSTRING("clickTwitter","\x0b","\x0b","\x74","\x20"),
	HX_HCSTRING("clickChat","\x40","\xcb","\xbe","\x20"),
	HX_HCSTRING("clickReadme","\x96","\x02","\x93","\x2b"),
	HX_HCSTRING("addOverlayEffects","\x13","\xf9","\x9d","\x3e"),
	HX_HCSTRING("BSODTimer","\xbf","\x70","\x5f","\x96"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("pressSteps","\x24","\xfd","\x66","\x61"),
	HX_HCSTRING("checkMouse","\x3d","\x18","\x55","\x1c"),
	HX_HCSTRING("initTaskBar","\x5e","\x32","\xc3","\xd6"),
	HX_HCSTRING("moveWindows","\x72","\x17","\xf1","\xc0"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PlayState_obj::playedMusic,"playedMusic");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playedMusic,"playedMusic");
};

#endif

hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_HCSTRING("playedMusic","\x52","\x68","\x3a","\x7e"),
	::String(null())
};

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_33_boot)
HXDLIN(  33)		playedMusic = false;
            	}
}

