// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_BSOD
#include <BSOD.h>
#endif
#ifndef INCLUDED_ChatFile
#include <ChatFile.h>
#endif
#ifndef INCLUDED_ChatLogs
#include <ChatLogs.h>
#endif
#ifndef INCLUDED_ChatWindow
#include <ChatWindow.h>
#endif
#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_MonthArray
#include <MonthArray.h>
#endif
#ifndef INCLUDED_OSOPal
#include <OSOPal.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Window
#include <Window.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_21731bfadcdf49aa_69_new,"ChatWindow","new",0x4d4ae1fa,"ChatWindow.new","ChatWindow.hx",69,0x2514fab6)
HX_DEFINE_STACK_FRAME(_hx_pos_21731bfadcdf49aa_14_new,"ChatWindow","new",0x4d4ae1fa,"ChatWindow.new","ChatWindow.hx",14,0x2514fab6)
static const ::String _hx_array_data_10881d08_3[] = {
	HX_("",00,00,00,00),
};
HX_DEFINE_STACK_FRAME(_hx_pos_21731bfadcdf49aa_46_new,"ChatWindow","new",0x4d4ae1fa,"ChatWindow.new","ChatWindow.hx",46,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_79_initChat,"ChatWindow","initChat",0x3e376e2e,"ChatWindow.initChat","ChatWindow.hx",79,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_90_initButtons,"ChatWindow","initButtons",0x0c08fcab,"ChatWindow.initButtons","ChatWindow.hx",90,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_102_initButtons,"ChatWindow","initButtons",0x0c08fcab,"ChatWindow.initButtons","ChatWindow.hx",102,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_119_checkCount,"ChatWindow","checkCount",0x6c28fc8d,"ChatWindow.checkCount","ChatWindow.hx",119,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_124_revive,"ChatWindow","revive",0x944b64fb,"ChatWindow.revive","ChatWindow.hx",124,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_132_newChat,"ChatWindow","newChat",0x0194f1f2,"ChatWindow.newChat","ChatWindow.hx",132,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_142_update,"ChatWindow","update",0x10d9f0af,"ChatWindow.update","ChatWindow.hx",142,0x2514fab6)
HX_LOCAL_STACK_FRAME(_hx_pos_21731bfadcdf49aa_167_addText,"ChatWindow","addText",0x993ff608,"ChatWindow.addText","ChatWindow.hx",167,0x2514fab6)

void ChatWindow_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::ChatWindow,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_21731bfadcdf49aa_69_new)
HXLINE(  70)			_gthis->initChat();
HXLINE(  71)			_gthis->chatArray = ( (::Array< ::String >)(::ChatLogs_obj::specialThanks->__get((int)1)) );
            		}
            		HX_END_LOCAL_FUNC0((void))

Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
int width = __o_width.Default(200);
int height = __o_height.Default(200);
::String name = __o_name.Default(HX_HCSTRING("Cache Corruptor v1.0.5","\x52","\xa9","\xd6","\xa8"));
int color = __o_color.Default(-16777216);
            	HX_GC_STACKFRAME(&_hx_pos_21731bfadcdf49aa_14_new)
HXLINE( 140)		this->chatTimer = ((Float)4);
HXLINE( 115)		this->aliveNum = (int)0;
HXLINE(  87)		this->finalFileExists = false;
HXLINE(  23)		this->erasing = false;
HXLINE(  19)		this->chatCutoff = ((Float)-180);
HXLINE(  17)		this->textArray = ::Array_obj< ::String >::__new(0);
HXLINE(  16)		this->chatArray = ::Array_obj< ::String >::fromData( _hx_array_data_10881d08_3,1);
HXLINE(  25)		 ::ChatWindow _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  27)		super::__construct(X,Y,width,height,name,color);
HXLINE(  29)		this->grpButtons =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  30)		this->add(this->grpButtons);
HXLINE(  32)		this->grpChat =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  33)		this->grpChat->set_x((int)8);
HXLINE(  34)		this->grpChat->set_y((int)195);
HXLINE(  35)		this->grpChat->set_color(::OSOPal_obj::lightPink);
HXLINE(  36)		this->add(this->grpChat);
HXLINE(  38)		{
HXLINE(  38)			int _g1 = (int)0;
HXDLIN(  38)			int _g = ::ChatLogs_obj::dates->get_length();
HXDLIN(  38)			while((_g1 < _g)){
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::ChatWindow,_gthis,::Array< ::Dynamic>,chatNum,int,i) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_21731bfadcdf49aa_46_new)
HXLINE(  47)					_gthis->initChat();
HXLINE(  48)					_gthis->chatArray = ( (::Array< ::String >)(::ChatLogs_obj::dates->__get(i)->__GetItem((int)2)) );
HXLINE(  49)					 ::flixel::group::FlxTypedSpriteGroup _gthis1 = _gthis->grpButtons;
HXDLIN(  49)					_gthis1->remove(chatNum->__get((int)0).StaticCast<  ::ChatFile >(),null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  51)					if (!(::PlayState_obj::playedMusic)) {
HXLINE(  53)						::flixel::FlxG_obj::sound->play(HX_("assets/music/bumblebee.mp3",0d,77,c6,b8),((Float)0.5),true,null(),null(),null());
HXLINE(  54)						::PlayState_obj::playedMusic = true;
            					}
HXLINE(  57)					if ((::flixel::FlxG_obj::random->_hx_float((int)0,(int)100,null()) < ((Float)0.0001))) {
HXLINE(  59)						 ::flixel::FlxState nextState =  ::BSOD_obj::__alloc( HX_CTX ,null());
HXDLIN(  59)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  59)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  38)				_g1 = (_g1 + (int)1);
HXDLIN(  38)				int i = (_g1 - (int)1);
HXLINE(  42)				::Array< ::String > dateText = ::MonthArray_obj::months;
HXDLIN(  42)				::String dateText1 = (dateText->__get(( (int)(::ChatLogs_obj::dates->__get(i)->__GetItem((int)0)) )) + HX_(" ",20,00,00,00));
HXDLIN(  42)				::String dateText2 = (dateText1 + ( (::String)(::ChatLogs_obj::dates->__get(i)->__GetItem((int)1)) ));
HXLINE(  44)				::Array< ::Dynamic> chatNum = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  45)				chatNum[(int)0] =  ::ChatFile_obj::__alloc( HX_CTX ,(int)8,(((int)11 * i) + (int)18),null(), ::Dynamic(new _hx_Closure_0(_gthis,chatNum,i)),dateText2,(int)-16777216,(width - (int)16));
HXLINE(  64)				 ::flixel::group::FlxTypedSpriteGroup _hx_tmp = this->grpButtons;
HXDLIN(  64)				_hx_tmp->add(chatNum->__get((int)0).StaticCast<  ::ChatFile >()).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE(  67)		 ::ChatFile specialThanks;
HXLINE(  68)		int specialThanks1 = (((int)11 * ::ChatLogs_obj::dates->get_length()) + (int)18);
HXDLIN(  68)		specialThanks =  ::ChatFile_obj::__alloc( HX_CTX ,(int)8,specialThanks1,null(), ::Dynamic(new _hx_Closure_1(_gthis)),HX_("Special Thanks",90,c6,05,41),(int)-16777216,(width - (int)16));
HXLINE(  73)		this->grpButtons->add(specialThanks).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  75)		this->initButtons();
            	}

Dynamic ChatWindow_obj::__CreateEmpty() { return new ChatWindow_obj; }

void *ChatWindow_obj::_hx_vtable = 0;

Dynamic ChatWindow_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ChatWindow_obj > _hx_result = new ChatWindow_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool ChatWindow_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x10881d08) {
		if (inClassId<=(int)0x0b6ffd77) {
			if (inClassId<=(int)0x03e5ced8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x03e5ced8;
			} else {
				return inClassId==(int)0x0b6ffd77;
			}
		} else {
			return inClassId==(int)0x10881d08;
		}
	} else {
		if (inClassId<=(int)0x282173df) {
			return inClassId==(int)0x25a685e0 || inClassId==(int)0x282173df;
		} else {
			return inClassId==(int)0x2e105115;
		}
	}
}

void ChatWindow_obj::initChat(){
            	HX_STACKFRAME(&_hx_pos_21731bfadcdf49aa_79_initChat)
HXLINE(  80)		this->grpChat->revive();
HXLINE(  81)		this->grpButtons->kill();
HXLINE(  83)		this->newChat();
HXLINE(  84)		this->addText();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChatWindow_obj,initChat,(void))

void ChatWindow_obj::initButtons(){
            	HX_GC_STACKFRAME(&_hx_pos_21731bfadcdf49aa_90_initButtons)
HXLINE(  89)		 ::ChatWindow _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  91)		this->grpButtons->revive();
HXLINE(  92)		this->grpChat->kill();
HXLINE(  95)		this->aliveNum = (int)0;
HXLINE(  96)		this->grpButtons->group->forEachAlive(this->checkCount_dyn(),false);
HXLINE(  98)		bool _hx_tmp;
HXDLIN(  98)		if ((this->aliveNum == (int)1)) {
HXLINE(  98)			_hx_tmp = !(this->finalFileExists);
            		}
            		else {
HXLINE(  98)			_hx_tmp = false;
            		}
HXDLIN(  98)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::ChatWindow,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_STACKFRAME(&_hx_pos_21731bfadcdf49aa_102_initButtons)
HXLINE( 103)				_gthis->initChat();
HXLINE( 104)				_gthis->chatArray = ( (::Array< ::String >)(::ChatLogs_obj::secret->__get((int)2)) );
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 100)			 ::ChatFile finalFile =  ::ChatFile_obj::__alloc( HX_CTX ,(int)8,(int)66,null(), ::Dynamic(new _hx_Closure_0(_gthis)),HX_("Sept 13",8c,1d,27,a7),(int)-16777216,::Std_obj::_hx_int((this->get_width() - (int)16)));
HXLINE( 107)			this->add(finalFile);
HXLINE( 109)			this->finalFileExists = true;
            		}
HXLINE( 112)		::flixel::FlxG_obj::log->advanced(this->aliveNum,::flixel::_hx_system::debug::log::LogStyle_obj::NORMAL,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChatWindow_obj,initButtons,(void))

void ChatWindow_obj::checkCount( ::flixel::FlxSprite b){
            	HX_STACKFRAME(&_hx_pos_21731bfadcdf49aa_119_checkCount)
HXDLIN( 119)		 ::ChatWindow _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 119)		_hx_tmp->aliveNum = (_hx_tmp->aliveNum + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChatWindow_obj,checkCount,(void))

void ChatWindow_obj::revive(){
            	HX_STACKFRAME(&_hx_pos_21731bfadcdf49aa_124_revive)
HXLINE( 125)		this->super::revive();
HXLINE( 126)		this->newChat();
HXLINE( 127)		this->initButtons();
            	}


void ChatWindow_obj::newChat(){
            	HX_STACKFRAME(&_hx_pos_21731bfadcdf49aa_132_newChat)
HXDLIN( 132)		if ((this->textArray->length > (int)0)) {
HXLINE( 134)			this->textArray = ::Array_obj< ::String >::__new(0);
HXLINE( 135)			this->grpChat->set_y((int)205);
HXLINE( 136)			this->grpChat->set_text(HX_("",00,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChatWindow_obj,newChat,(void))

void ChatWindow_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_21731bfadcdf49aa_142_update)
HXLINE( 143)		this->super::update(elapsed);
HXLINE( 146)		bool _hx_tmp;
HXDLIN( 146)		if (!((this->chatTimer <= (int)0))) {
HXLINE( 146)			 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 146)			int KeyArray;
HXDLIN( 146)			::String s = HX_("SPACE",a6,c4,54,ff);
HXDLIN( 146)			s = s.toUpperCase();
HXDLIN( 146)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 146)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 146)				KeyArray = (int)-1;
            			}
HXDLIN( 146)			int KeyArray1;
HXDLIN( 146)			::String s1 = HX_("A",41,00,00,00);
HXDLIN( 146)			s1 = s1.toUpperCase();
HXDLIN( 146)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 146)				KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            			}
            			else {
HXLINE( 146)				KeyArray1 = (int)-1;
            			}
HXDLIN( 146)			int KeyArray2;
HXDLIN( 146)			::String s2 = HX_("UP",5b,4a,00,00);
HXDLIN( 146)			s2 = s2.toUpperCase();
HXDLIN( 146)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 146)				KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            			}
            			else {
HXLINE( 146)				KeyArray2 = (int)-1;
            			}
HXDLIN( 146)			::String s3 = HX_("W",57,00,00,00);
HXDLIN( 146)			s3 = s3.toUpperCase();
HXDLIN( 146)			int KeyArray3;
HXDLIN( 146)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE( 146)				KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            			}
            			else {
HXLINE( 146)				KeyArray3 = (int)-1;
            			}
HXDLIN( 146)			_hx_tmp = _this->checkKeyArrayState(::Array_obj< int >::__new(4)->init(0,KeyArray)->init(1,KeyArray1)->init(2,KeyArray2)->init(3,KeyArray3),(int)2);
            		}
            		else {
HXLINE( 146)			_hx_tmp = true;
            		}
HXDLIN( 146)		if (_hx_tmp) {
HXLINE( 148)			if ((this->chatArray->length > (int)0)) {
HXLINE( 150)				this->addText();
HXLINE( 151)				 ::flixel::math::FlxRandom _hx_tmp1 = ::flixel::FlxG_obj::random;
HXDLIN( 151)				int _hx_tmp2 = this->chatArray->__get((int)0).length;
HXDLIN( 151)				Float _hx_tmp3 = _hx_tmp1->_hx_float(_hx_tmp2,(this->chatArray->__get((int)0).length + (int)3),null());
HXDLIN( 151)				this->chatTimer = (((Float)_hx_tmp3 / (Float)::flixel::FlxG_obj::random->_hx_int((int)6,(int)12,null())) + ((Float)0.5));
            			}
            			else {
HXLINE( 155)				this->initButtons();
            			}
            		}
            		else {
HXLINE( 161)			 ::ChatWindow _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 161)			_hx_tmp4->chatTimer = (_hx_tmp4->chatTimer - ::flixel::FlxG_obj::elapsed);
            		}
            	}


void ChatWindow_obj::addText(){
            	HX_STACKFRAME(&_hx_pos_21731bfadcdf49aa_167_addText)
HXLINE( 168)		::flixel::FlxG_obj::sound->play(HX_("assets/sounds/message.mp3",8a,99,e8,b4),((Float)0.7),null(),null(),null(),null());
HXLINE( 169)		::Array< ::String > _hx_tmp = this->textArray;
HXDLIN( 169)		_hx_tmp->push(this->chatArray->__get((int)0));
HXLINE( 170)		::Array< ::String > _hx_tmp1 = this->chatArray;
HXDLIN( 170)		_hx_tmp1->remove(this->chatArray->__get((int)0));
HXLINE( 171)		this->grpChat->set_text(HX_("",00,00,00,00));
HXLINE( 173)		if ((this->textArray->length >= (int)19)) {
HXLINE( 175)			::Array< ::String > _hx_tmp2 = this->textArray;
HXDLIN( 175)			_hx_tmp2->remove(this->textArray->__get((int)0));
            		}
            		else {
HXLINE( 179)			 ::flixel::text::FlxText _g = this->grpChat;
HXDLIN( 179)			_g->set_y((_g->y - (int)10));
            		}
HXLINE( 182)		{
HXLINE( 182)			int _g1 = (int)0;
HXDLIN( 182)			int _g2 = this->textArray->length;
HXDLIN( 182)			while((_g1 < _g2)){
HXLINE( 182)				_g1 = (_g1 + (int)1);
HXDLIN( 182)				int i = (_g1 - (int)1);
HXLINE( 184)				{
HXLINE( 184)					 ::flixel::text::FlxText _g21 = this->grpChat;
HXDLIN( 184)					::String _g22 = _g21->text;
HXDLIN( 184)					_g21->set_text((_g22 + this->textArray->__get(i)));
            				}
HXLINE( 185)				{
HXLINE( 185)					 ::flixel::text::FlxText _g23 = this->grpChat;
HXDLIN( 185)					_g23->set_text((_g23->text + HX_("\n",0a,00,00,00)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChatWindow_obj,addText,(void))


hx::ObjectPtr< ChatWindow_obj > ChatWindow_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color) {
	hx::ObjectPtr< ChatWindow_obj > __this = new ChatWindow_obj();
	__this->__construct(__o_X,__o_Y,__o_width,__o_height,__o_name,__o_color);
	return __this;
}

hx::ObjectPtr< ChatWindow_obj > ChatWindow_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color) {
	ChatWindow_obj *__this = (ChatWindow_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ChatWindow_obj), true, "ChatWindow"));
	*(void **)__this = ChatWindow_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_width,__o_height,__o_name,__o_color);
	return __this;
}

ChatWindow_obj::ChatWindow_obj()
{
}

void ChatWindow_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChatWindow);
	HX_MARK_MEMBER_NAME(chatArray,"chatArray");
	HX_MARK_MEMBER_NAME(textArray,"textArray");
	HX_MARK_MEMBER_NAME(chatCutoff,"chatCutoff");
	HX_MARK_MEMBER_NAME(grpChat,"grpChat");
	HX_MARK_MEMBER_NAME(grpButtons,"grpButtons");
	HX_MARK_MEMBER_NAME(erasing,"erasing");
	HX_MARK_MEMBER_NAME(finalFileExists,"finalFileExists");
	HX_MARK_MEMBER_NAME(aliveNum,"aliveNum");
	HX_MARK_MEMBER_NAME(chatTimer,"chatTimer");
	 ::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChatWindow_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(chatArray,"chatArray");
	HX_VISIT_MEMBER_NAME(textArray,"textArray");
	HX_VISIT_MEMBER_NAME(chatCutoff,"chatCutoff");
	HX_VISIT_MEMBER_NAME(grpChat,"grpChat");
	HX_VISIT_MEMBER_NAME(grpButtons,"grpButtons");
	HX_VISIT_MEMBER_NAME(erasing,"erasing");
	HX_VISIT_MEMBER_NAME(finalFileExists,"finalFileExists");
	HX_VISIT_MEMBER_NAME(aliveNum,"aliveNum");
	HX_VISIT_MEMBER_NAME(chatTimer,"chatTimer");
	 ::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ChatWindow_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"revive") ) { return hx::Val( revive_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"grpChat") ) { return hx::Val( grpChat ); }
		if (HX_FIELD_EQ(inName,"erasing") ) { return hx::Val( erasing ); }
		if (HX_FIELD_EQ(inName,"newChat") ) { return hx::Val( newChat_dyn() ); }
		if (HX_FIELD_EQ(inName,"addText") ) { return hx::Val( addText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"initChat") ) { return hx::Val( initChat_dyn() ); }
		if (HX_FIELD_EQ(inName,"aliveNum") ) { return hx::Val( aliveNum ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chatArray") ) { return hx::Val( chatArray ); }
		if (HX_FIELD_EQ(inName,"textArray") ) { return hx::Val( textArray ); }
		if (HX_FIELD_EQ(inName,"chatTimer") ) { return hx::Val( chatTimer ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chatCutoff") ) { return hx::Val( chatCutoff ); }
		if (HX_FIELD_EQ(inName,"grpButtons") ) { return hx::Val( grpButtons ); }
		if (HX_FIELD_EQ(inName,"checkCount") ) { return hx::Val( checkCount_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initButtons") ) { return hx::Val( initButtons_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"finalFileExists") ) { return hx::Val( finalFileExists ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ChatWindow_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"grpChat") ) { grpChat=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"erasing") ) { erasing=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"aliveNum") ) { aliveNum=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chatArray") ) { chatArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textArray") ) { textArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chatTimer") ) { chatTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chatCutoff") ) { chatCutoff=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"grpButtons") ) { grpButtons=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"finalFileExists") ) { finalFileExists=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ChatWindow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("chatArray","\xa1","\xaf","\x9e","\xab"));
	outFields->push(HX_HCSTRING("textArray","\xac","\xfd","\x7c","\xbe"));
	outFields->push(HX_HCSTRING("chatCutoff","\x25","\x70","\x82","\x07"));
	outFields->push(HX_HCSTRING("grpChat","\x5d","\x6d","\x4b","\xf9"));
	outFields->push(HX_HCSTRING("grpButtons","\xdc","\x64","\x4f","\xeb"));
	outFields->push(HX_HCSTRING("erasing","\xa3","\xd7","\xd8","\x22"));
	outFields->push(HX_HCSTRING("finalFileExists","\x8e","\xf8","\x81","\x0c"));
	outFields->push(HX_HCSTRING("aliveNum","\x79","\xd0","\xea","\x66"));
	outFields->push(HX_HCSTRING("chatTimer","\xcd","\x01","\x45","\x96"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ChatWindow_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(ChatWindow_obj,chatArray),HX_HCSTRING("chatArray","\xa1","\xaf","\x9e","\xab")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(ChatWindow_obj,textArray),HX_HCSTRING("textArray","\xac","\xfd","\x7c","\xbe")},
	{hx::fsFloat,(int)offsetof(ChatWindow_obj,chatCutoff),HX_HCSTRING("chatCutoff","\x25","\x70","\x82","\x07")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(ChatWindow_obj,grpChat),HX_HCSTRING("grpChat","\x5d","\x6d","\x4b","\xf9")},
	{hx::fsObject /*::flixel::group::FlxTypedSpriteGroup*/ ,(int)offsetof(ChatWindow_obj,grpButtons),HX_HCSTRING("grpButtons","\xdc","\x64","\x4f","\xeb")},
	{hx::fsBool,(int)offsetof(ChatWindow_obj,erasing),HX_HCSTRING("erasing","\xa3","\xd7","\xd8","\x22")},
	{hx::fsBool,(int)offsetof(ChatWindow_obj,finalFileExists),HX_HCSTRING("finalFileExists","\x8e","\xf8","\x81","\x0c")},
	{hx::fsInt,(int)offsetof(ChatWindow_obj,aliveNum),HX_HCSTRING("aliveNum","\x79","\xd0","\xea","\x66")},
	{hx::fsFloat,(int)offsetof(ChatWindow_obj,chatTimer),HX_HCSTRING("chatTimer","\xcd","\x01","\x45","\x96")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ChatWindow_obj_sStaticStorageInfo = 0;
#endif

static ::String ChatWindow_obj_sMemberFields[] = {
	HX_HCSTRING("chatArray","\xa1","\xaf","\x9e","\xab"),
	HX_HCSTRING("textArray","\xac","\xfd","\x7c","\xbe"),
	HX_HCSTRING("chatCutoff","\x25","\x70","\x82","\x07"),
	HX_HCSTRING("grpChat","\x5d","\x6d","\x4b","\xf9"),
	HX_HCSTRING("grpButtons","\xdc","\x64","\x4f","\xeb"),
	HX_HCSTRING("erasing","\xa3","\xd7","\xd8","\x22"),
	HX_HCSTRING("initChat","\x08","\x8e","\x76","\x46"),
	HX_HCSTRING("finalFileExists","\x8e","\xf8","\x81","\x0c"),
	HX_HCSTRING("initButtons","\x11","\xc1","\xdf","\x82"),
	HX_HCSTRING("aliveNum","\x79","\xd0","\xea","\x66"),
	HX_HCSTRING("checkCount","\xe7","\x46","\x53","\x5a"),
	HX_HCSTRING("revive","\x55","\xfa","\x76","\x0a"),
	HX_HCSTRING("newChat","\x58","\x0b","\x8c","\xf1"),
	HX_HCSTRING("chatTimer","\xcd","\x01","\x45","\x96"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("addText","\x6e","\x0f","\x37","\x89"),
	::String(null()) };

static void ChatWindow_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChatWindow_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChatWindow_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChatWindow_obj::__mClass,"__mClass");
};

#endif

hx::Class ChatWindow_obj::__mClass;

void ChatWindow_obj::__register()
{
	hx::Object *dummy = new ChatWindow_obj;
	ChatWindow_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ChatWindow","\x08","\x1d","\x88","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ChatWindow_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ChatWindow_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ChatWindow_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChatWindow_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChatWindow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChatWindow_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

