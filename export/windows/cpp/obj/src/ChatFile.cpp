// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_ChatFile
#include <ChatFile.h>
#endif
#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_OSOPal
#include <OSOPal.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a678cc313d7c250f_18_new,"ChatFile","new",0x27e85c86,"ChatFile.new","ChatFile.hx",18,0x7d4f15aa)
HX_LOCAL_STACK_FRAME(_hx_pos_a678cc313d7c250f_28_update,"ChatFile","update",0xf6ee95a3,"ChatFile.update","ChatFile.hx",28,0x7d4f15aa)

void ChatFile_obj::__construct(Float X,int Y, ::Dynamic iconGraphic, ::Dynamic OnClick,::String __o_text,hx::Null< int >  __o_color,hx::Null< int >  __o_width){
::String text = __o_text.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
int color = __o_color.Default(-65536);
int width = __o_width.Default(100);
            	HX_STACKFRAME(&_hx_pos_a678cc313d7c250f_18_new)
HXLINE(  19)		super::__construct(X,Y,iconGraphic,OnClick,text,color);
HXLINE(  21)		this->icon->makeGraphic(width,(int)10,::OSOPal_obj::lightPink,null(),null());
HXLINE(  22)		this->icon->set_alpha(((Float)0.1));
HXLINE(  23)		this->fileName->set_x(X);
HXLINE(  24)		 ::flixel::text::FlxText _hx_tmp = this->fileName;
HXDLIN(  24)		_hx_tmp->set_y((Y - (int)1));
            	}

Dynamic ChatFile_obj::__CreateEmpty() { return new ChatFile_obj; }

void *ChatFile_obj::_hx_vtable = 0;

Dynamic ChatFile_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ChatFile_obj > _hx_result = new ChatFile_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool ChatFile_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			if (inClassId<=(int)0x04e765f8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x04e765f8;
			} else {
				return inClassId==(int)0x0b6ffd77;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		if (inClassId<=(int)0x2e105115) {
			return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
		} else {
			return inClassId==(int)0x2e94fa9c;
		}
	}
}

void ChatFile_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a678cc313d7c250f_28_update)
HXLINE(  29)		this->super::update(elapsed);
HXLINE(  31)		if (::flixel::FlxG_obj::mouse->overlaps(this->icon,null())) {
HXLINE(  33)			this->icon->set_alpha(((Float)0.5));
HXLINE(  34)			this->fileName->set_alpha(((Float)0.9));
            		}
            		else {
HXLINE(  38)			this->fileName->set_alpha(((Float)0.5));
HXLINE(  39)			this->icon->set_alpha(((Float)0.2));
            		}
            	}



hx::ObjectPtr< ChatFile_obj > ChatFile_obj::__new(Float X,int Y, ::Dynamic iconGraphic, ::Dynamic OnClick,::String __o_text,hx::Null< int >  __o_color,hx::Null< int >  __o_width) {
	hx::ObjectPtr< ChatFile_obj > __this = new ChatFile_obj();
	__this->__construct(X,Y,iconGraphic,OnClick,__o_text,__o_color,__o_width);
	return __this;
}

hx::ObjectPtr< ChatFile_obj > ChatFile_obj::__alloc(hx::Ctx *_hx_ctx,Float X,int Y, ::Dynamic iconGraphic, ::Dynamic OnClick,::String __o_text,hx::Null< int >  __o_color,hx::Null< int >  __o_width) {
	ChatFile_obj *__this = (ChatFile_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ChatFile_obj), true, "ChatFile"));
	*(void **)__this = ChatFile_obj::_hx_vtable;
	__this->__construct(X,Y,iconGraphic,OnClick,__o_text,__o_color,__o_width);
	return __this;
}

ChatFile_obj::ChatFile_obj()
{
}

hx::Val ChatFile_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ChatFile_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ChatFile_obj_sStaticStorageInfo = 0;
#endif

static ::String ChatFile_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void ChatFile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChatFile_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChatFile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChatFile_obj::__mClass,"__mClass");
};

#endif

hx::Class ChatFile_obj::__mClass;

void ChatFile_obj::__register()
{
	hx::Object *dummy = new ChatFile_obj;
	ChatFile_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ChatFile","\x94","\x61","\x9a","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ChatFile_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ChatFile_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ChatFile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChatFile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChatFile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChatFile_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

