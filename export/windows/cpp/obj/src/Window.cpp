// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_OSOPal
#include <OSOPal.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Window
#include <Window.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseEventManager
#include <flixel/input/mouse/FlxMouseEventManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxSpriteButton
#include <flixel/ui/FlxSpriteButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_FlxSprite
#include <flixel/ui/FlxTypedButton_flixel_FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9a48a356b28e106d_17_new,"Window","new",0xb569f102,"Window.new","Window.hx",17,0x37eaa4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_9a48a356b28e106d_67_update,"Window","update",0x3597f6a7,"Window.update","Window.hx",67,0x37eaa4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_9a48a356b28e106d_85_kill,"Window","kill",0x05504cbc,"Window.kill","Window.hx",85,0x37eaa4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_9a48a356b28e106d_96_winDragSet,"Window","winDragSet",0x73be2af0,"Window.winDragSet","Window.hx",96,0x37eaa4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_9a48a356b28e106d_104_onDown,"Window","onDown",0x938a71bf,"Window.onDown","Window.hx",104,0x37eaa4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_9a48a356b28e106d_109_closeWindow,"Window","closeWindow",0x71d74c6a,"Window.closeWindow","Window.hx",109,0x37eaa4ae)
HX_LOCAL_STACK_FRAME(_hx_pos_9a48a356b28e106d_114_minimizeWindow,"Window","minimizeWindow",0x9098b04c,"Window.minimizeWindow","Window.hx",114,0x37eaa4ae)

void Window_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
int width = __o_width.Default(200);
int height = __o_height.Default(200);
::String name = __o_name.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
int color = __o_color.Default(-16777216);
            	HX_GC_STACKFRAME(&_hx_pos_9a48a356b28e106d_17_new)
HXLINE( 101)		this->pressDown = false;
HXLINE(  93)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  93)		point->_inPool = false;
HXDLIN(  93)		this->mouseOffset = point;
HXLINE(  92)		this->mousePressing = false;
HXLINE(  30)		super::__construct(null(),null(),null());
HXLINE(  32)		this->set_x(X);
HXLINE(  33)		this->set_y(Y);
HXLINE(  35)		this->outLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)-2,(int)-2,null());
HXLINE(  36)		 ::flixel::FlxSprite _hx_tmp = this->outLine;
HXDLIN(  36)		int _hx_tmp1 = ::Std_obj::_hx_int((width + (int)4));
HXDLIN(  36)		int _hx_tmp2 = ::Std_obj::_hx_int((height + (int)4));
HXDLIN(  36)		_hx_tmp->makeGraphic(_hx_tmp1,_hx_tmp2,::OSOPal_obj::darkPink,null(),null());
HXLINE(  37)		this->add(this->outLine);
HXLINE(  39)		this->backGround =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(  40)		 ::flixel::FlxSprite _hx_tmp3 = this->backGround;
HXDLIN(  40)		int _hx_tmp4 = ::Std_obj::_hx_int(width);
HXDLIN(  40)		_hx_tmp3->makeGraphic(_hx_tmp4,::Std_obj::_hx_int(height),color,null(),null());
HXLINE(  41)		this->add(this->backGround);
HXLINE(  43)		this->topBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(  44)		this->topBar->makeGraphic(width,(int)14,color,null(),null());
HXLINE(  45)		this->add(this->topBar);
HXLINE(  47)		this->topBarOutline =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)14,null());
HXLINE(  48)		this->topBarOutline->makeGraphic(width,(int)1,::OSOPal_obj::lightPink,null(),null());
HXLINE(  49)		this->add(this->topBarOutline);
HXLINE(  51)		this->title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)2,(int)1,(int)0,name,null(),null());
HXLINE(  52)		this->title->set_color(::OSOPal_obj::darkPurple);
HXLINE(  53)		this->add(this->title);
HXLINE(  55)		this->closeButton =  ::flixel::ui::FlxSpriteButton_obj::__alloc( HX_CTX ,(width - (int)12),(int)2,null(),this->closeWindow_dyn());
HXLINE(  56)		this->closeButton->loadGraphic(HX_("assets/images/exit.png",04,76,d3,b1),null(),null(),null(),null(),null());
HXLINE(  57)		this->add(this->closeButton);
HXLINE(  59)		this->minimizeButton =  ::flixel::ui::FlxSpriteButton_obj::__alloc( HX_CTX ,((width - (int)12) - (int)12),(int)2,null(),this->minimizeWindow_dyn());
HXLINE(  60)		this->minimizeButton->loadGraphic(HX_("assets/images/minimize.png",84,ef,f4,13),null(),null(),null(),null(),null());
HXLINE(  63)		::flixel::input::mouse::FlxMouseEventManager_obj::add(this->topBar,this->winDragSet_dyn(),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic Window_obj::__CreateEmpty() { return new Window_obj; }

void *Window_obj::_hx_vtable = 0;

Dynamic Window_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Window_obj > _hx_result = new Window_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Window_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			if (inClassId<=(int)0x03e5ced8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x03e5ced8;
			} else {
				return inClassId==(int)0x0b6ffd77;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
	}
}

void Window_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9a48a356b28e106d_67_update)
HXLINE(  68)		this->super::update(elapsed);
HXLINE(  70)		bool _hx_tmp;
HXDLIN(  70)		bool _hx_tmp1;
HXDLIN(  70)		bool _hx_tmp2;
HXDLIN(  70)		bool _hx_tmp3;
HXDLIN(  70)		if (this->mousePressing) {
HXLINE(  70)			_hx_tmp3 = (::flixel::FlxG_obj::mouse->x >= (int)0);
            		}
            		else {
HXLINE(  70)			_hx_tmp3 = false;
            		}
HXDLIN(  70)		if (_hx_tmp3) {
HXLINE(  70)			_hx_tmp2 = (::flixel::FlxG_obj::mouse->x <= ::flixel::FlxG_obj::width);
            		}
            		else {
HXLINE(  70)			_hx_tmp2 = false;
            		}
HXDLIN(  70)		if (_hx_tmp2) {
HXLINE(  70)			_hx_tmp1 = (::flixel::FlxG_obj::mouse->y >= (int)0);
            		}
            		else {
HXLINE(  70)			_hx_tmp1 = false;
            		}
HXDLIN(  70)		if (_hx_tmp1) {
HXLINE(  70)			_hx_tmp = (::flixel::FlxG_obj::mouse->y <= ::flixel::FlxG_obj::height);
            		}
            		else {
HXLINE(  70)			_hx_tmp = false;
            		}
HXDLIN(  70)		if (_hx_tmp) {
HXLINE(  72)			this->set_x((::flixel::FlxG_obj::mouse->x - this->mouseOffset->x));
HXLINE(  73)			this->set_y((::flixel::FlxG_obj::mouse->y - this->mouseOffset->y));
            		}
HXLINE(  76)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)-1)) {
HXLINE(  78)			this->pressDown = false;
HXLINE(  79)			this->mousePressing = false;
            		}
            	}


void Window_obj::kill(){
            	HX_STACKFRAME(&_hx_pos_9a48a356b28e106d_85_kill)
HXLINE(  86)		this->super::kill();
HXLINE(  88)		this->mouseOffset->set_x((int)0);
HXLINE(  89)		this->mouseOffset->set_y((int)0);
            	}


void Window_obj::winDragSet( ::flixel::FlxSprite _){
            	HX_STACKFRAME(&_hx_pos_9a48a356b28e106d_96_winDragSet)
HXLINE(  97)		this->mousePressing = true;
HXLINE(  98)		 ::flixel::math::FlxPoint _hx_tmp = this->mouseOffset;
HXDLIN(  98)		Float _hx_tmp1 = (::flixel::FlxG_obj::mouse->x - this->x);
HXDLIN(  98)		_hx_tmp->set(_hx_tmp1,(::flixel::FlxG_obj::mouse->y - this->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,winDragSet,(void))

void Window_obj::onDown( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9a48a356b28e106d_104_onDown)
HXDLIN( 104)		this->pressDown = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,onDown,(void))

void Window_obj::closeWindow(){
            	HX_STACKFRAME(&_hx_pos_9a48a356b28e106d_109_closeWindow)
HXDLIN( 109)		this->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,closeWindow,(void))

void Window_obj::minimizeWindow(){
            	HX_STACKFRAME(&_hx_pos_9a48a356b28e106d_114_minimizeWindow)
HXDLIN( 114)		this->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,minimizeWindow,(void))


hx::ObjectPtr< Window_obj > Window_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color) {
	hx::ObjectPtr< Window_obj > __this = new Window_obj();
	__this->__construct(__o_X,__o_Y,__o_width,__o_height,__o_name,__o_color);
	return __this;
}

hx::ObjectPtr< Window_obj > Window_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color) {
	Window_obj *__this = (Window_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Window_obj), true, "Window"));
	*(void **)__this = Window_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_width,__o_height,__o_name,__o_color);
	return __this;
}

Window_obj::Window_obj()
{
}

void Window_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Window);
	HX_MARK_MEMBER_NAME(title,"title");
	HX_MARK_MEMBER_NAME(outLine,"outLine");
	HX_MARK_MEMBER_NAME(topBar,"topBar");
	HX_MARK_MEMBER_NAME(topBarOutline,"topBarOutline");
	HX_MARK_MEMBER_NAME(backGround,"backGround");
	HX_MARK_MEMBER_NAME(closeButton,"closeButton");
	HX_MARK_MEMBER_NAME(minimizeButton,"minimizeButton");
	HX_MARK_MEMBER_NAME(mousePressing,"mousePressing");
	HX_MARK_MEMBER_NAME(mouseOffset,"mouseOffset");
	HX_MARK_MEMBER_NAME(pressDown,"pressDown");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Window_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(title,"title");
	HX_VISIT_MEMBER_NAME(outLine,"outLine");
	HX_VISIT_MEMBER_NAME(topBar,"topBar");
	HX_VISIT_MEMBER_NAME(topBarOutline,"topBarOutline");
	HX_VISIT_MEMBER_NAME(backGround,"backGround");
	HX_VISIT_MEMBER_NAME(closeButton,"closeButton");
	HX_VISIT_MEMBER_NAME(minimizeButton,"minimizeButton");
	HX_VISIT_MEMBER_NAME(mousePressing,"mousePressing");
	HX_VISIT_MEMBER_NAME(mouseOffset,"mouseOffset");
	HX_VISIT_MEMBER_NAME(pressDown,"pressDown");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Window_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { return hx::Val( title ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"topBar") ) { return hx::Val( topBar ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"onDown") ) { return hx::Val( onDown_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outLine") ) { return hx::Val( outLine ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pressDown") ) { return hx::Val( pressDown ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backGround") ) { return hx::Val( backGround ); }
		if (HX_FIELD_EQ(inName,"winDragSet") ) { return hx::Val( winDragSet_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeButton") ) { return hx::Val( closeButton ); }
		if (HX_FIELD_EQ(inName,"mouseOffset") ) { return hx::Val( mouseOffset ); }
		if (HX_FIELD_EQ(inName,"closeWindow") ) { return hx::Val( closeWindow_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"topBarOutline") ) { return hx::Val( topBarOutline ); }
		if (HX_FIELD_EQ(inName,"mousePressing") ) { return hx::Val( mousePressing ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minimizeButton") ) { return hx::Val( minimizeButton ); }
		if (HX_FIELD_EQ(inName,"minimizeWindow") ) { return hx::Val( minimizeWindow_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Window_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"title") ) { title=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"topBar") ) { topBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outLine") ) { outLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pressDown") ) { pressDown=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backGround") ) { backGround=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeButton") ) { closeButton=inValue.Cast<  ::flixel::ui::FlxSpriteButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseOffset") ) { mouseOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"topBarOutline") ) { topBarOutline=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mousePressing") ) { mousePressing=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minimizeButton") ) { minimizeButton=inValue.Cast<  ::flixel::ui::FlxSpriteButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Window_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("title","\x98","\x15","\x3b","\x10"));
	outFields->push(HX_HCSTRING("outLine","\xa2","\x43","\x97","\xcc"));
	outFields->push(HX_HCSTRING("topBar","\x3e","\x8e","\x1a","\x95"));
	outFields->push(HX_HCSTRING("topBarOutline","\xe4","\x14","\xba","\x26"));
	outFields->push(HX_HCSTRING("backGround","\x0e","\x08","\xb2","\x5a"));
	outFields->push(HX_HCSTRING("closeButton","\xca","\x87","\x30","\x94"));
	outFields->push(HX_HCSTRING("minimizeButton","\xb0","\x3f","\x6b","\xb8"));
	outFields->push(HX_HCSTRING("mousePressing","\x84","\x8c","\x15","\xff"));
	outFields->push(HX_HCSTRING("mouseOffset","\x98","\xcb","\xc7","\x55"));
	outFields->push(HX_HCSTRING("pressDown","\x85","\xf5","\x72","\x89"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Window_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Window_obj,title),HX_HCSTRING("title","\x98","\x15","\x3b","\x10")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Window_obj,outLine),HX_HCSTRING("outLine","\xa2","\x43","\x97","\xcc")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Window_obj,topBar),HX_HCSTRING("topBar","\x3e","\x8e","\x1a","\x95")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Window_obj,topBarOutline),HX_HCSTRING("topBarOutline","\xe4","\x14","\xba","\x26")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Window_obj,backGround),HX_HCSTRING("backGround","\x0e","\x08","\xb2","\x5a")},
	{hx::fsObject /*::flixel::ui::FlxSpriteButton*/ ,(int)offsetof(Window_obj,closeButton),HX_HCSTRING("closeButton","\xca","\x87","\x30","\x94")},
	{hx::fsObject /*::flixel::ui::FlxSpriteButton*/ ,(int)offsetof(Window_obj,minimizeButton),HX_HCSTRING("minimizeButton","\xb0","\x3f","\x6b","\xb8")},
	{hx::fsBool,(int)offsetof(Window_obj,mousePressing),HX_HCSTRING("mousePressing","\x84","\x8c","\x15","\xff")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Window_obj,mouseOffset),HX_HCSTRING("mouseOffset","\x98","\xcb","\xc7","\x55")},
	{hx::fsBool,(int)offsetof(Window_obj,pressDown),HX_HCSTRING("pressDown","\x85","\xf5","\x72","\x89")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Window_obj_sStaticStorageInfo = 0;
#endif

static ::String Window_obj_sMemberFields[] = {
	HX_HCSTRING("title","\x98","\x15","\x3b","\x10"),
	HX_HCSTRING("outLine","\xa2","\x43","\x97","\xcc"),
	HX_HCSTRING("topBar","\x3e","\x8e","\x1a","\x95"),
	HX_HCSTRING("topBarOutline","\xe4","\x14","\xba","\x26"),
	HX_HCSTRING("backGround","\x0e","\x08","\xb2","\x5a"),
	HX_HCSTRING("closeButton","\xca","\x87","\x30","\x94"),
	HX_HCSTRING("minimizeButton","\xb0","\x3f","\x6b","\xb8"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("mousePressing","\x84","\x8c","\x15","\xff"),
	HX_HCSTRING("mouseOffset","\x98","\xcb","\xc7","\x55"),
	HX_HCSTRING("winDragSet","\x52","\x13","\xe4","\x39"),
	HX_HCSTRING("pressDown","\x85","\xf5","\x72","\x89"),
	HX_HCSTRING("onDown","\x21","\x01","\xf8","\xe4"),
	HX_HCSTRING("closeWindow","\xc8","\xb9","\xdc","\x0c"),
	HX_HCSTRING("minimizeWindow","\xae","\x71","\x17","\x31"),
	::String(null()) };

static void Window_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Window_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Window_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Window_obj::__mClass,"__mClass");
};

#endif

hx::Class Window_obj::__mClass;

void Window_obj::__register()
{
	hx::Object *dummy = new Window_obj;
	Window_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Window","\x10","\x08","\x21","\x87");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Window_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Window_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Window_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Window_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Window_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Window_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

