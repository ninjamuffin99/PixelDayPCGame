// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_addons_text_TypeSound
#include <flixel/addons/text/TypeSound.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_media_Sound
#include <openfl/_legacy/media/Sound.h>
#endif
#ifndef INCLUDED_openfl__legacy_net_URLRequest
#include <openfl/_legacy/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl__legacy_text_TextField
#include <openfl/_legacy/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_09182b6b580f8cf2_26_new,"flixel.addons.text.FlxTypeText","new",0x24edf2f3,"flixel.addons.text.FlxTypeText.new","flixel/addons/text/FlxTypeText.hx",26,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_168_start,"flixel.addons.text.FlxTypeText","start",0x9d61a1b5,"flixel.addons.text.FlxTypeText.start","flixel/addons/text/FlxTypeText.hx",168,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_207_insertBreakLines,"flixel.addons.text.FlxTypeText","insertBreakLines",0x530ffae6,"flixel.addons.text.FlxTypeText.insertBreakLines","flixel/addons/text/FlxTypeText.hx",207,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_248_erase,"flixel.addons.text.FlxTypeText","erase",0x8c731639,"flixel.addons.text.FlxTypeText.erase","flixel/addons/text/FlxTypeText.hx",248,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_284_resetText,"flixel.addons.text.FlxTypeText","resetText",0xe198a8ef,"flixel.addons.text.FlxTypeText.resetText","flixel/addons/text/FlxTypeText.hx",284,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_303_setTypingVariation,"flixel.addons.text.FlxTypeText","setTypingVariation",0x5d85e3a7,"flixel.addons.text.FlxTypeText.setTypingVariation","flixel/addons/text/FlxTypeText.hx",303,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_312_onComplete,"flixel.addons.text.FlxTypeText","onComplete",0xeb447ac5,"flixel.addons.text.FlxTypeText.onComplete","flixel/addons/text/FlxTypeText.hx",312,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_345_onErased,"flixel.addons.text.FlxTypeText","onErased",0xfbbc7fca,"flixel.addons.text.FlxTypeText.onErased","flixel/addons/text/FlxTypeText.hx",345,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_356_update,"flixel.addons.text.FlxTypeText","update",0x99170156,"flixel.addons.text.FlxTypeText.update","flixel/addons/text/FlxTypeText.hx",356,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_494_skip,"flixel.addons.text.FlxTypeText","skip",0x2e99348c,"flixel.addons.text.FlxTypeText.skip","flixel/addons/text/FlxTypeText.hx",494,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_508_loadDefaultSound,"flixel.addons.text.FlxTypeText","loadDefaultSound",0xf442cd21,"flixel.addons.text.FlxTypeText.loadDefaultSound","flixel/addons/text/FlxTypeText.hx",508,0x9451ed7e)
HX_LOCAL_STACK_FRAME(_hx_pos_09182b6b580f8cf2_133_boot,"flixel.addons.text.FlxTypeText","boot",0x235fa23f,"flixel.addons.text.FlxTypeText.boot","flixel/addons/text/FlxTypeText.hx",133,0x9451ed7e)
namespace flixel{
namespace addons{
namespace text{

void FlxTypeText_obj::__construct(Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont){
int Size = __o_Size.Default(8);
bool EmbeddedFont = __o_EmbeddedFont.Default(true);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_26_new)
HXLINE( 129)		this->_typeVarPercent = ((Float)0.5);
HXLINE( 125)		this->_typingVariation = false;
HXLINE( 121)		this->_cursorTimer = ((Float)0.0);
HXLINE( 117)		this->_waiting = false;
HXLINE( 113)		this->_erasing = false;
HXLINE( 109)		this->_typing = false;
HXLINE( 105)		this->_length = (int)0;
HXLINE( 101)		this->_waitTimer = ((Float)0.0);
HXLINE(  97)		this->_timer = ((Float)0.0);
HXLINE(  93)		this->_finalText = HX_("",00,00,00,00);
HXLINE(  81)		this->skipKeys = ::Array_obj< int >::__new(0);
HXLINE(  77)		this->finishSounds = false;
HXLINE(  71)		this->useDefaultSound = false;
HXLINE(  63)		this->paused = false;
HXLINE(  59)		this->waitTime = ((Float)1.0);
HXLINE(  55)		this->autoErase = false;
HXLINE(  51)		this->prefix = HX_("",00,00,00,00);
HXLINE(  47)		this->cursorBlinkSpeed = ((Float)0.5);
HXLINE(  43)		this->cursorCharacter = HX_("|",7c,00,00,00);
HXLINE(  39)		this->showCursor = false;
HXLINE(  35)		this->eraseDelay = ((Float)0.02);
HXLINE(  31)		this->delay = ((Float)0.05);
HXLINE( 152)		super::__construct(X,Y,Width,HX_("",00,00,00,00),Size,EmbeddedFont);
HXLINE( 153)		this->_finalText = Text;
            	}

Dynamic FlxTypeText_obj::__CreateEmpty() { return new FlxTypeText_obj; }

void *FlxTypeText_obj::_hx_vtable = 0;

Dynamic FlxTypeText_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypeText_obj > _hx_result = new FlxTypeText_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool FlxTypeText_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x17ec3e6d) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x17ec3e6d;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x4d1b55ae;
	}
}

void FlxTypeText_obj::start( ::Dynamic Delay,hx::Null< bool >  __o_ForceRestart,hx::Null< bool >  __o_AutoErase,::Array< int > SkipKeys, ::Dynamic Callback){
bool ForceRestart = __o_ForceRestart.Default(false);
bool AutoErase = __o_AutoErase.Default(false);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_168_start)
HXLINE( 169)		if (hx::IsNotNull( Delay )) {
HXLINE( 171)			this->delay = Delay;
            		}
HXLINE( 174)		this->_typing = true;
HXLINE( 175)		this->_erasing = false;
HXLINE( 176)		this->paused = false;
HXLINE( 177)		this->_waiting = false;
HXLINE( 179)		if (ForceRestart) {
HXLINE( 181)			this->set_text(HX_("",00,00,00,00));
HXLINE( 182)			this->_length = (int)0;
            		}
HXLINE( 185)		this->autoErase = AutoErase;
HXLINE( 187)		if (hx::IsNotNull( SkipKeys )) {
HXLINE( 189)			this->skipKeys = SkipKeys;
            		}
HXLINE( 192)		this->completeCallback = Callback;
HXLINE( 194)		this->insertBreakLines();
HXLINE( 196)		if (this->useDefaultSound) {
HXLINE( 198)			this->loadDefaultSound();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxTypeText_obj,start,(void))

void FlxTypeText_obj::insertBreakLines(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_207_insertBreakLines)
HXLINE( 208)		::String saveText = this->text;
HXLINE( 210)		int last = this->_finalText.length;
HXLINE( 211)		int n0 = (int)0;
HXLINE( 212)		int n1 = (int)0;
HXLINE( 214)		while(true){
HXLINE( 216)			last = this->_finalText.substr((int)0,last).lastIndexOf(HX_(" ",20,00,00,00),null());
HXLINE( 218)			if ((last <= (int)0)) {
HXLINE( 219)				goto _hx_goto_2;
            			}
HXLINE( 221)			this->set_text((this->prefix + this->_finalText));
HXLINE( 222)			n0 = this->textField->get_numLines();
HXLINE( 224)			::String nextText = (this->_finalText.substr((int)0,last) + HX_("\n",0a,00,00,00));
HXDLIN( 224)			::String nextText1 = this->_finalText;
HXDLIN( 224)			::String nextText2 = (nextText + nextText1.substr((last + (int)1),this->_finalText.length));
HXLINE( 226)			this->set_text((this->prefix + nextText2));
HXLINE( 227)			n1 = this->textField->get_numLines();
HXLINE( 229)			if ((n0 == n1)) {
HXLINE( 231)				this->_finalText = nextText2;
            			}
            		}
            		_hx_goto_2:;
HXLINE( 235)		this->set_text(saveText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,insertBreakLines,(void))

void FlxTypeText_obj::erase( ::Dynamic Delay,hx::Null< bool >  __o_ForceRestart,::Array< int > SkipKeys, ::Dynamic Callback){
bool ForceRestart = __o_ForceRestart.Default(false);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_248_erase)
HXLINE( 249)		this->_erasing = true;
HXLINE( 250)		this->_typing = false;
HXLINE( 251)		this->paused = false;
HXLINE( 252)		this->_waiting = false;
HXLINE( 254)		if (hx::IsNotNull( Delay )) {
HXLINE( 256)			this->eraseDelay = Delay;
            		}
HXLINE( 259)		if (ForceRestart) {
HXLINE( 261)			this->_length = this->_finalText.length;
HXLINE( 262)			this->set_text(this->_finalText);
            		}
HXLINE( 265)		if (hx::IsNotNull( SkipKeys )) {
HXLINE( 267)			this->skipKeys = SkipKeys;
            		}
HXLINE( 270)		this->eraseCallback = Callback;
HXLINE( 272)		if (this->useDefaultSound) {
HXLINE( 274)			this->loadDefaultSound();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypeText_obj,erase,(void))

void FlxTypeText_obj::resetText(::String Text){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_284_resetText)
HXLINE( 285)		this->set_text(HX_("",00,00,00,00));
HXLINE( 286)		this->_finalText = Text;
HXLINE( 287)		this->_typing = false;
HXLINE( 288)		this->_erasing = false;
HXLINE( 289)		this->paused = false;
HXLINE( 290)		this->_waiting = false;
HXLINE( 291)		this->_length = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypeText_obj,resetText,(void))

void FlxTypeText_obj::setTypingVariation(hx::Null< Float >  __o_Amount,hx::Null< bool >  __o_On){
Float Amount = __o_Amount.Default(((Float)0.5));
bool On = __o_On.Default(true);
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_303_setTypingVariation)
HXLINE( 304)		this->_typingVariation = On;
HXLINE( 305)		Float lowerBound;
HXDLIN( 305)		if ((Amount < (int)0)) {
HXLINE( 305)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 305)			lowerBound = Amount;
            		}
HXDLIN( 305)		 ::Dynamic _hx_tmp;
HXDLIN( 305)		if ((lowerBound > (int)1)) {
HXLINE( 305)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE( 305)			_hx_tmp = lowerBound;
            		}
HXDLIN( 305)		this->_typeVarPercent = _hx_tmp;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypeText_obj,setTypingVariation,(void))

void FlxTypeText_obj::onComplete(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_312_onComplete)
HXLINE( 313)		this->_timer = (int)0;
HXLINE( 314)		this->_typing = false;
HXLINE( 316)		if (this->useDefaultSound) {
HXLINE( 318)			 ::flixel::_hx_system::FlxSound _this = this->_sound;
HXDLIN( 318)			_this->cleanup(_this->autoDestroy,true);
            		}
            		else {
HXLINE( 320)			if (hx::IsNotNull( this->sounds )) {
HXLINE( 322)				int _g = (int)0;
HXDLIN( 322)				::Array< ::Dynamic> _g1 = this->sounds;
HXDLIN( 322)				while((_g < _g1->length)){
HXLINE( 322)					 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 322)					_g = (_g + (int)1);
HXLINE( 324)					sound->cleanup(sound->autoDestroy,true);
            				}
            			}
            		}
HXLINE( 328)		if (hx::IsNotNull( this->completeCallback )) {
HXLINE( 330)			this->completeCallback();
            		}
HXLINE( 333)		bool _hx_tmp;
HXDLIN( 333)		if (this->autoErase) {
HXLINE( 333)			_hx_tmp = (this->waitTime <= (int)0);
            		}
            		else {
HXLINE( 333)			_hx_tmp = false;
            		}
HXDLIN( 333)		if (_hx_tmp) {
HXLINE( 335)			this->_erasing = true;
            		}
            		else {
HXLINE( 337)			if (this->autoErase) {
HXLINE( 339)				this->_waitTimer = this->waitTime;
HXLINE( 340)				this->_waiting = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,onComplete,(void))

void FlxTypeText_obj::onErased(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_345_onErased)
HXLINE( 346)		this->_timer = (int)0;
HXLINE( 347)		this->_erasing = false;
HXLINE( 349)		if (hx::IsNotNull( this->eraseCallback )) {
HXLINE( 351)			this->eraseCallback();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,onErased,(void))

void FlxTypeText_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_356_update)
HXLINE( 359)		bool _hx_tmp;
HXDLIN( 359)		bool _hx_tmp1;
HXDLIN( 359)		if (hx::IsNotNull( this->skipKeys )) {
HXLINE( 359)			_hx_tmp1 = (this->skipKeys->length > (int)0);
            		}
            		else {
HXLINE( 359)			_hx_tmp1 = false;
            		}
HXDLIN( 359)		if (_hx_tmp1) {
HXLINE( 359)			_hx_tmp = ::flixel::FlxG_obj::keys->checkKeyArrayState(this->skipKeys,(int)2);
            		}
            		else {
HXLINE( 359)			_hx_tmp = false;
            		}
HXDLIN( 359)		if (_hx_tmp) {
HXLINE( 361)			this->skip();
            		}
HXLINE( 365)		bool _hx_tmp2;
HXDLIN( 365)		if (this->_waiting) {
HXLINE( 365)			_hx_tmp2 = !(this->paused);
            		}
            		else {
HXLINE( 365)			_hx_tmp2 = false;
            		}
HXDLIN( 365)		if (_hx_tmp2) {
HXLINE( 367)			 ::flixel::addons::text::FlxTypeText _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 367)			_hx_tmp3->_waitTimer = (_hx_tmp3->_waitTimer - elapsed);
HXLINE( 369)			if ((this->_waitTimer <= (int)0)) {
HXLINE( 371)				this->_waiting = false;
HXLINE( 372)				this->_erasing = true;
            			}
            		}
HXLINE( 377)		bool _hx_tmp4;
HXDLIN( 377)		if (!(this->_waiting)) {
HXLINE( 377)			_hx_tmp4 = !(this->paused);
            		}
            		else {
HXLINE( 377)			_hx_tmp4 = false;
            		}
HXDLIN( 377)		if (_hx_tmp4) {
HXLINE( 379)			bool _hx_tmp5;
HXDLIN( 379)			if ((this->_length < this->_finalText.length)) {
HXLINE( 379)				_hx_tmp5 = this->_typing;
            			}
            			else {
HXLINE( 379)				_hx_tmp5 = false;
            			}
HXDLIN( 379)			if (_hx_tmp5) {
HXLINE( 381)				 ::flixel::addons::text::FlxTypeText _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 381)				_hx_tmp6->_timer = (_hx_tmp6->_timer + elapsed);
            			}
HXLINE( 384)			bool _hx_tmp7;
HXDLIN( 384)			if ((this->_length > (int)0)) {
HXLINE( 384)				_hx_tmp7 = this->_erasing;
            			}
            			else {
HXLINE( 384)				_hx_tmp7 = false;
            			}
HXDLIN( 384)			if (_hx_tmp7) {
HXLINE( 386)				 ::flixel::addons::text::FlxTypeText _hx_tmp8 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 386)				_hx_tmp8->_timer = (_hx_tmp8->_timer + elapsed);
            			}
            		}
HXLINE( 392)		bool _hx_tmp9;
HXDLIN( 392)		if (!(this->_typing)) {
HXLINE( 392)			_hx_tmp9 = this->_erasing;
            		}
            		else {
HXLINE( 392)			_hx_tmp9 = true;
            		}
HXDLIN( 392)		if (_hx_tmp9) {
HXLINE( 394)			bool _hx_tmp10;
HXDLIN( 394)			if (this->_typing) {
HXLINE( 394)				_hx_tmp10 = (this->_timer >= this->delay);
            			}
            			else {
HXLINE( 394)				_hx_tmp10 = false;
            			}
HXDLIN( 394)			if (_hx_tmp10) {
HXLINE( 396)				 ::flixel::addons::text::FlxTypeText _hx_tmp11 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 396)				int _hx_tmp12 = _hx_tmp11->_length;
HXDLIN( 396)				_hx_tmp11->_length = (_hx_tmp12 + ::Std_obj::_hx_int(((Float)this->_timer / (Float)this->delay)));
HXLINE( 397)				if ((this->_length > this->_finalText.length)) {
HXLINE( 398)					this->_length = this->_finalText.length;
            				}
            			}
HXLINE( 401)			bool _hx_tmp13;
HXDLIN( 401)			if (this->_erasing) {
HXLINE( 401)				_hx_tmp13 = (this->_timer >= this->eraseDelay);
            			}
            			else {
HXLINE( 401)				_hx_tmp13 = false;
            			}
HXDLIN( 401)			if (_hx_tmp13) {
HXLINE( 403)				 ::flixel::addons::text::FlxTypeText _hx_tmp14 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 403)				int _hx_tmp15 = _hx_tmp14->_length;
HXDLIN( 403)				_hx_tmp14->_length = (_hx_tmp15 - ::Std_obj::_hx_int(((Float)this->_timer / (Float)this->eraseDelay)));
HXLINE( 404)				if ((this->_length < (int)0)) {
HXLINE( 405)					this->_length = (int)0;
            				}
            			}
HXLINE( 408)			bool _hx_tmp16;
HXDLIN( 408)			bool _hx_tmp17;
HXDLIN( 408)			if (this->_typing) {
HXLINE( 408)				_hx_tmp17 = (this->_timer >= this->delay);
            			}
            			else {
HXLINE( 408)				_hx_tmp17 = false;
            			}
HXDLIN( 408)			if (!(_hx_tmp17)) {
HXLINE( 408)				if (this->_erasing) {
HXLINE( 408)					_hx_tmp16 = (this->_timer >= this->eraseDelay);
            				}
            				else {
HXLINE( 408)					_hx_tmp16 = false;
            				}
            			}
            			else {
HXLINE( 408)				_hx_tmp16 = true;
            			}
HXDLIN( 408)			if (_hx_tmp16) {
HXLINE( 410)				if (this->_typingVariation) {
HXLINE( 412)					if (this->_typing) {
HXLINE( 414)						 ::flixel::math::FlxRandom _hx_tmp18 = ::flixel::FlxG_obj::random;
HXDLIN( 414)						Float _hx_tmp19 = ((Float)(-(this->delay) * this->_typeVarPercent) / (Float)(int)2);
HXDLIN( 414)						this->_timer = _hx_tmp18->_hx_float(_hx_tmp19,((Float)(this->delay * this->_typeVarPercent) / (Float)(int)2),null());
            					}
            					else {
HXLINE( 418)						 ::flixel::math::FlxRandom _hx_tmp20 = ::flixel::FlxG_obj::random;
HXDLIN( 418)						Float _hx_tmp21 = ((Float)(-(this->eraseDelay) * this->_typeVarPercent) / (Float)(int)2);
HXDLIN( 418)						this->_timer = _hx_tmp20->_hx_float(_hx_tmp21,((Float)(this->eraseDelay * this->_typeVarPercent) / (Float)(int)2),null());
            					}
            				}
            				else {
HXLINE( 423)					 ::flixel::addons::text::FlxTypeText _hx_tmp22 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 423)					_hx_tmp22->_timer = hx::Mod(_hx_tmp22->_timer,this->delay);
            				}
HXLINE( 426)				bool _hx_tmp23;
HXDLIN( 426)				if (hx::IsNotNull( this->sounds )) {
HXLINE( 426)					_hx_tmp23 = !(this->useDefaultSound);
            				}
            				else {
HXLINE( 426)					_hx_tmp23 = false;
            				}
HXDLIN( 426)				if (_hx_tmp23) {
HXLINE( 428)					if (!(this->finishSounds)) {
HXLINE( 430)						int _g = (int)0;
HXDLIN( 430)						::Array< ::Dynamic> _g1 = this->sounds;
HXDLIN( 430)						while((_g < _g1->length)){
HXLINE( 430)							 ::flixel::_hx_system::FlxSound sound = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXDLIN( 430)							_g = (_g + (int)1);
HXLINE( 432)							sound->cleanup(sound->autoDestroy,true);
            						}
            					}
HXLINE( 436)					::flixel::FlxG_obj::random->getObject_flixel_system_FlxSound(this->sounds,null(),null(),null())->play(!(this->finishSounds),null(),null());
            				}
            				else {
HXLINE( 438)					if (this->useDefaultSound) {
HXLINE( 440)						this->_sound->play(!(this->finishSounds),null(),null());
            					}
            				}
            			}
            		}
HXLINE( 446)		::String _hx_tmp24 = this->prefix;
HXDLIN( 446)		::flixel::addons::text::FlxTypeText_obj::helperString = (_hx_tmp24 + this->_finalText.substr((int)0,this->_length));
HXLINE( 449)		if (this->showCursor) {
HXLINE( 451)			 ::flixel::addons::text::FlxTypeText _hx_tmp25 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 451)			_hx_tmp25->_cursorTimer = (_hx_tmp25->_cursorTimer + elapsed);
HXLINE( 454)			bool isBreakLine = ((this->prefix + this->_finalText).charAt(::flixel::addons::text::FlxTypeText_obj::helperString.length) == HX_("\n",0a,00,00,00));
HXLINE( 456)			bool _hx_tmp26;
HXDLIN( 456)			Float _hx_tmp27 = this->_cursorTimer;
HXDLIN( 456)			if ((_hx_tmp27 > ((Float)this->cursorBlinkSpeed / (Float)(int)2))) {
HXLINE( 456)				_hx_tmp26 = !(isBreakLine);
            			}
            			else {
HXLINE( 456)				_hx_tmp26 = false;
            			}
HXDLIN( 456)			if (_hx_tmp26) {
HXLINE( 458)				 ::Dynamic _hx_tmp28 = hx::ClassOf< ::flixel::addons::text::FlxTypeText >();
HXDLIN( 458)				::String _hx_tmp29 = ::flixel::addons::text::FlxTypeText_obj::helperString;
HXDLIN( 458)				::flixel::addons::text::FlxTypeText_obj::helperString = (_hx_tmp29 + this->cursorCharacter.charAt((int)0));
            			}
HXLINE( 461)			if ((this->_cursorTimer > this->cursorBlinkSpeed)) {
HXLINE( 463)				this->_cursorTimer = (int)0;
            			}
            		}
HXLINE( 468)		if ((::flixel::addons::text::FlxTypeText_obj::helperString != this->text)) {
HXLINE( 470)			this->set_text(::flixel::addons::text::FlxTypeText_obj::helperString);
HXLINE( 473)			bool _hx_tmp30;
HXDLIN( 473)			bool _hx_tmp31;
HXDLIN( 473)			bool _hx_tmp32;
HXDLIN( 473)			if ((this->_length >= this->_finalText.length)) {
HXLINE( 473)				_hx_tmp32 = this->_typing;
            			}
            			else {
HXLINE( 473)				_hx_tmp32 = false;
            			}
HXDLIN( 473)			if (_hx_tmp32) {
HXLINE( 473)				_hx_tmp31 = !(this->_waiting);
            			}
            			else {
HXLINE( 473)				_hx_tmp31 = false;
            			}
HXDLIN( 473)			if (_hx_tmp31) {
HXLINE( 473)				_hx_tmp30 = !(this->_erasing);
            			}
            			else {
HXLINE( 473)				_hx_tmp30 = false;
            			}
HXDLIN( 473)			if (_hx_tmp30) {
HXLINE( 475)				this->onComplete();
            			}
HXLINE( 479)			bool _hx_tmp33;
HXDLIN( 479)			bool _hx_tmp34;
HXDLIN( 479)			bool _hx_tmp35;
HXDLIN( 479)			if ((this->_length == (int)0)) {
HXLINE( 479)				_hx_tmp35 = this->_erasing;
            			}
            			else {
HXLINE( 479)				_hx_tmp35 = false;
            			}
HXDLIN( 479)			if (_hx_tmp35) {
HXLINE( 479)				_hx_tmp34 = !(this->_typing);
            			}
            			else {
HXLINE( 479)				_hx_tmp34 = false;
            			}
HXDLIN( 479)			if (_hx_tmp34) {
HXLINE( 479)				_hx_tmp33 = !(this->_waiting);
            			}
            			else {
HXLINE( 479)				_hx_tmp33 = false;
            			}
HXDLIN( 479)			if (_hx_tmp33) {
HXLINE( 481)				this->onErased();
            			}
            		}
HXLINE( 485)		this->super::update(elapsed);
            	}


void FlxTypeText_obj::skip(){
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_494_skip)
HXDLIN( 494)		bool _hx_tmp;
HXDLIN( 494)		if (!(this->_erasing)) {
HXDLIN( 494)			_hx_tmp = this->_waiting;
            		}
            		else {
HXDLIN( 494)			_hx_tmp = true;
            		}
HXDLIN( 494)		if (_hx_tmp) {
HXLINE( 496)			this->_length = (int)0;
HXLINE( 497)			this->_waiting = false;
            		}
            		else {
HXLINE( 499)			if (this->_typing) {
HXLINE( 501)				this->_length = this->_finalText.length;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,skip,(void))

void FlxTypeText_obj::loadDefaultSound(){
            	HX_GC_STACKFRAME(&_hx_pos_09182b6b580f8cf2_508_loadDefaultSound)
HXDLIN( 508)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 508)		this->_sound = _hx_tmp->load( ::flixel::addons::text::TypeSound_obj::__alloc( HX_CTX ,null(),null(),null()),null(),null(),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypeText_obj,loadDefaultSound,(void))

::String FlxTypeText_obj::helperString;


hx::ObjectPtr< FlxTypeText_obj > FlxTypeText_obj::__new(Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont) {
	hx::ObjectPtr< FlxTypeText_obj > __this = new FlxTypeText_obj();
	__this->__construct(X,Y,Width,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

hx::ObjectPtr< FlxTypeText_obj > FlxTypeText_obj::__alloc(hx::Ctx *_hx_ctx,Float X,Float Y,int Width,::String Text,hx::Null< int >  __o_Size,hx::Null< bool >  __o_EmbeddedFont) {
	FlxTypeText_obj *__this = (FlxTypeText_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTypeText_obj), true, "flixel.addons.text.FlxTypeText"));
	*(void **)__this = FlxTypeText_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Text,__o_Size,__o_EmbeddedFont);
	return __this;
}

FlxTypeText_obj::FlxTypeText_obj()
{
}

void FlxTypeText_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypeText);
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(eraseDelay,"eraseDelay");
	HX_MARK_MEMBER_NAME(showCursor,"showCursor");
	HX_MARK_MEMBER_NAME(cursorCharacter,"cursorCharacter");
	HX_MARK_MEMBER_NAME(cursorBlinkSpeed,"cursorBlinkSpeed");
	HX_MARK_MEMBER_NAME(prefix,"prefix");
	HX_MARK_MEMBER_NAME(autoErase,"autoErase");
	HX_MARK_MEMBER_NAME(waitTime,"waitTime");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(sounds,"sounds");
	HX_MARK_MEMBER_NAME(useDefaultSound,"useDefaultSound");
	HX_MARK_MEMBER_NAME(finishSounds,"finishSounds");
	HX_MARK_MEMBER_NAME(skipKeys,"skipKeys");
	HX_MARK_MEMBER_NAME(completeCallback,"completeCallback");
	HX_MARK_MEMBER_NAME(eraseCallback,"eraseCallback");
	HX_MARK_MEMBER_NAME(_finalText,"_finalText");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_waitTimer,"_waitTimer");
	HX_MARK_MEMBER_NAME(_length,"_length");
	HX_MARK_MEMBER_NAME(_typing,"_typing");
	HX_MARK_MEMBER_NAME(_erasing,"_erasing");
	HX_MARK_MEMBER_NAME(_waiting,"_waiting");
	HX_MARK_MEMBER_NAME(_cursorTimer,"_cursorTimer");
	HX_MARK_MEMBER_NAME(_typingVariation,"_typingVariation");
	HX_MARK_MEMBER_NAME(_typeVarPercent,"_typeVarPercent");
	HX_MARK_MEMBER_NAME(_sound,"_sound");
	 ::flixel::text::FlxText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypeText_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(eraseDelay,"eraseDelay");
	HX_VISIT_MEMBER_NAME(showCursor,"showCursor");
	HX_VISIT_MEMBER_NAME(cursorCharacter,"cursorCharacter");
	HX_VISIT_MEMBER_NAME(cursorBlinkSpeed,"cursorBlinkSpeed");
	HX_VISIT_MEMBER_NAME(prefix,"prefix");
	HX_VISIT_MEMBER_NAME(autoErase,"autoErase");
	HX_VISIT_MEMBER_NAME(waitTime,"waitTime");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(sounds,"sounds");
	HX_VISIT_MEMBER_NAME(useDefaultSound,"useDefaultSound");
	HX_VISIT_MEMBER_NAME(finishSounds,"finishSounds");
	HX_VISIT_MEMBER_NAME(skipKeys,"skipKeys");
	HX_VISIT_MEMBER_NAME(completeCallback,"completeCallback");
	HX_VISIT_MEMBER_NAME(eraseCallback,"eraseCallback");
	HX_VISIT_MEMBER_NAME(_finalText,"_finalText");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_waitTimer,"_waitTimer");
	HX_VISIT_MEMBER_NAME(_length,"_length");
	HX_VISIT_MEMBER_NAME(_typing,"_typing");
	HX_VISIT_MEMBER_NAME(_erasing,"_erasing");
	HX_VISIT_MEMBER_NAME(_waiting,"_waiting");
	HX_VISIT_MEMBER_NAME(_cursorTimer,"_cursorTimer");
	HX_VISIT_MEMBER_NAME(_typingVariation,"_typingVariation");
	HX_VISIT_MEMBER_NAME(_typeVarPercent,"_typeVarPercent");
	HX_VISIT_MEMBER_NAME(_sound,"_sound");
	 ::flixel::text::FlxText_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypeText_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"skip") ) { return hx::Val( skip_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay ); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn() ); }
		if (HX_FIELD_EQ(inName,"erase") ) { return hx::Val( erase_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prefix") ) { return hx::Val( prefix ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"sounds") ) { return hx::Val( sounds ); }
		if (HX_FIELD_EQ(inName,"_timer") ) { return hx::Val( _timer ); }
		if (HX_FIELD_EQ(inName,"_sound") ) { return hx::Val( _sound ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { return hx::Val( _length ); }
		if (HX_FIELD_EQ(inName,"_typing") ) { return hx::Val( _typing ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"waitTime") ) { return hx::Val( waitTime ); }
		if (HX_FIELD_EQ(inName,"skipKeys") ) { return hx::Val( skipKeys ); }
		if (HX_FIELD_EQ(inName,"_erasing") ) { return hx::Val( _erasing ); }
		if (HX_FIELD_EQ(inName,"_waiting") ) { return hx::Val( _waiting ); }
		if (HX_FIELD_EQ(inName,"onErased") ) { return hx::Val( onErased_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoErase") ) { return hx::Val( autoErase ); }
		if (HX_FIELD_EQ(inName,"resetText") ) { return hx::Val( resetText_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eraseDelay") ) { return hx::Val( eraseDelay ); }
		if (HX_FIELD_EQ(inName,"showCursor") ) { return hx::Val( showCursor ); }
		if (HX_FIELD_EQ(inName,"_finalText") ) { return hx::Val( _finalText ); }
		if (HX_FIELD_EQ(inName,"_waitTimer") ) { return hx::Val( _waitTimer ); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"finishSounds") ) { return hx::Val( finishSounds ); }
		if (HX_FIELD_EQ(inName,"_cursorTimer") ) { return hx::Val( _cursorTimer ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"eraseCallback") ) { return hx::Val( eraseCallback ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cursorCharacter") ) { return hx::Val( cursorCharacter ); }
		if (HX_FIELD_EQ(inName,"useDefaultSound") ) { return hx::Val( useDefaultSound ); }
		if (HX_FIELD_EQ(inName,"_typeVarPercent") ) { return hx::Val( _typeVarPercent ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cursorBlinkSpeed") ) { return hx::Val( cursorBlinkSpeed ); }
		if (HX_FIELD_EQ(inName,"completeCallback") ) { return hx::Val( completeCallback ); }
		if (HX_FIELD_EQ(inName,"_typingVariation") ) { return hx::Val( _typingVariation ); }
		if (HX_FIELD_EQ(inName,"insertBreakLines") ) { return hx::Val( insertBreakLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadDefaultSound") ) { return hx::Val( loadDefaultSound_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setTypingVariation") ) { return hx::Val( setTypingVariation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTypeText_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"helperString") ) { outValue = ( helperString ); return true; }
	}
	return false;
}

hx::Val FlxTypeText_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"prefix") ) { prefix=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sounds") ) { sounds=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_sound") ) { _sound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_length") ) { _length=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_typing") ) { _typing=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"waitTime") ) { waitTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skipKeys") ) { skipKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_erasing") ) { _erasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_waiting") ) { _waiting=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"autoErase") ) { autoErase=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"eraseDelay") ) { eraseDelay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"showCursor") ) { showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_finalText") ) { _finalText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_waitTimer") ) { _waitTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"finishSounds") ) { finishSounds=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cursorTimer") ) { _cursorTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"eraseCallback") ) { eraseCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cursorCharacter") ) { cursorCharacter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useDefaultSound") ) { useDefaultSound=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_typeVarPercent") ) { _typeVarPercent=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"cursorBlinkSpeed") ) { cursorBlinkSpeed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"completeCallback") ) { completeCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_typingVariation") ) { _typingVariation=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxTypeText_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"helperString") ) { helperString=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void FlxTypeText_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("eraseDelay","\xbd","\x5c","\x83","\xf3"));
	outFields->push(HX_HCSTRING("showCursor","\xb3","\x33","\x5d","\xa8"));
	outFields->push(HX_HCSTRING("cursorCharacter","\xf3","\xa1","\x7a","\x94"));
	outFields->push(HX_HCSTRING("cursorBlinkSpeed","\x01","\x63","\x0f","\xcc"));
	outFields->push(HX_HCSTRING("prefix","\x92","\xd9","\xb6","\xae"));
	outFields->push(HX_HCSTRING("autoErase","\xf7","\x26","\x28","\x51"));
	outFields->push(HX_HCSTRING("waitTime","\x22","\x31","\xdf","\x55"));
	outFields->push(HX_HCSTRING("paused","\xae","\x40","\x84","\xef"));
	outFields->push(HX_HCSTRING("sounds","\xc4","\xa8","\x2e","\x32"));
	outFields->push(HX_HCSTRING("useDefaultSound","\x35","\x0f","\x08","\x0e"));
	outFields->push(HX_HCSTRING("finishSounds","\x77","\xdd","\xa7","\x2f"));
	outFields->push(HX_HCSTRING("skipKeys","\x13","\xd0","\x5b","\xbd"));
	outFields->push(HX_HCSTRING("_finalText","\x04","\xc7","\x73","\xeb"));
	outFields->push(HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_waitTimer","\xd1","\x48","\x0e","\x29"));
	outFields->push(HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"));
	outFields->push(HX_HCSTRING("_typing","\x16","\x10","\xb1","\xc5"));
	outFields->push(HX_HCSTRING("_erasing","\x24","\x31","\x91","\x5c"));
	outFields->push(HX_HCSTRING("_waiting","\x0e","\x43","\xe0","\x18"));
	outFields->push(HX_HCSTRING("_cursorTimer","\x10","\xc7","\x20","\xff"));
	outFields->push(HX_HCSTRING("_typingVariation","\xdd","\x98","\x2c","\xda"));
	outFields->push(HX_HCSTRING("_typeVarPercent","\x97","\x5a","\x85","\x58"));
	outFields->push(HX_HCSTRING("_sound","\x10","\xd4","\xb3","\x7c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypeText_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,delay),HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,eraseDelay),HX_HCSTRING("eraseDelay","\xbd","\x5c","\x83","\xf3")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,showCursor),HX_HCSTRING("showCursor","\xb3","\x33","\x5d","\xa8")},
	{hx::fsString,(int)offsetof(FlxTypeText_obj,cursorCharacter),HX_HCSTRING("cursorCharacter","\xf3","\xa1","\x7a","\x94")},
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,cursorBlinkSpeed),HX_HCSTRING("cursorBlinkSpeed","\x01","\x63","\x0f","\xcc")},
	{hx::fsString,(int)offsetof(FlxTypeText_obj,prefix),HX_HCSTRING("prefix","\x92","\xd9","\xb6","\xae")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,autoErase),HX_HCSTRING("autoErase","\xf7","\x26","\x28","\x51")},
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,waitTime),HX_HCSTRING("waitTime","\x22","\x31","\xdf","\x55")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,paused),HX_HCSTRING("paused","\xae","\x40","\x84","\xef")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTypeText_obj,sounds),HX_HCSTRING("sounds","\xc4","\xa8","\x2e","\x32")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,useDefaultSound),HX_HCSTRING("useDefaultSound","\x35","\x0f","\x08","\x0e")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,finishSounds),HX_HCSTRING("finishSounds","\x77","\xdd","\xa7","\x2f")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(FlxTypeText_obj,skipKeys),HX_HCSTRING("skipKeys","\x13","\xd0","\x5b","\xbd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypeText_obj,completeCallback),HX_HCSTRING("completeCallback","\x9e","\x37","\xf5","\x50")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypeText_obj,eraseCallback),HX_HCSTRING("eraseCallback","\xcb","\x94","\xe1","\x93")},
	{hx::fsString,(int)offsetof(FlxTypeText_obj,_finalText),HX_HCSTRING("_finalText","\x04","\xc7","\x73","\xeb")},
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,_timer),HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c")},
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,_waitTimer),HX_HCSTRING("_waitTimer","\xd1","\x48","\x0e","\x29")},
	{hx::fsInt,(int)offsetof(FlxTypeText_obj,_length),HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,_typing),HX_HCSTRING("_typing","\x16","\x10","\xb1","\xc5")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,_erasing),HX_HCSTRING("_erasing","\x24","\x31","\x91","\x5c")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,_waiting),HX_HCSTRING("_waiting","\x0e","\x43","\xe0","\x18")},
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,_cursorTimer),HX_HCSTRING("_cursorTimer","\x10","\xc7","\x20","\xff")},
	{hx::fsBool,(int)offsetof(FlxTypeText_obj,_typingVariation),HX_HCSTRING("_typingVariation","\xdd","\x98","\x2c","\xda")},
	{hx::fsFloat,(int)offsetof(FlxTypeText_obj,_typeVarPercent),HX_HCSTRING("_typeVarPercent","\x97","\x5a","\x85","\x58")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(FlxTypeText_obj,_sound),HX_HCSTRING("_sound","\x10","\xd4","\xb3","\x7c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxTypeText_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &FlxTypeText_obj::helperString,HX_HCSTRING("helperString","\xdf","\xe0","\xc7","\x51")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxTypeText_obj_sMemberFields[] = {
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("eraseDelay","\xbd","\x5c","\x83","\xf3"),
	HX_HCSTRING("showCursor","\xb3","\x33","\x5d","\xa8"),
	HX_HCSTRING("cursorCharacter","\xf3","\xa1","\x7a","\x94"),
	HX_HCSTRING("cursorBlinkSpeed","\x01","\x63","\x0f","\xcc"),
	HX_HCSTRING("prefix","\x92","\xd9","\xb6","\xae"),
	HX_HCSTRING("autoErase","\xf7","\x26","\x28","\x51"),
	HX_HCSTRING("waitTime","\x22","\x31","\xdf","\x55"),
	HX_HCSTRING("paused","\xae","\x40","\x84","\xef"),
	HX_HCSTRING("sounds","\xc4","\xa8","\x2e","\x32"),
	HX_HCSTRING("useDefaultSound","\x35","\x0f","\x08","\x0e"),
	HX_HCSTRING("finishSounds","\x77","\xdd","\xa7","\x2f"),
	HX_HCSTRING("skipKeys","\x13","\xd0","\x5b","\xbd"),
	HX_HCSTRING("completeCallback","\x9e","\x37","\xf5","\x50"),
	HX_HCSTRING("eraseCallback","\xcb","\x94","\xe1","\x93"),
	HX_HCSTRING("_finalText","\x04","\xc7","\x73","\xeb"),
	HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"),
	HX_HCSTRING("_waitTimer","\xd1","\x48","\x0e","\x29"),
	HX_HCSTRING("_length","\x85","\xa6","\x7e","\x0d"),
	HX_HCSTRING("_typing","\x16","\x10","\xb1","\xc5"),
	HX_HCSTRING("_erasing","\x24","\x31","\x91","\x5c"),
	HX_HCSTRING("_waiting","\x0e","\x43","\xe0","\x18"),
	HX_HCSTRING("_cursorTimer","\x10","\xc7","\x20","\xff"),
	HX_HCSTRING("_typingVariation","\xdd","\x98","\x2c","\xda"),
	HX_HCSTRING("_typeVarPercent","\x97","\x5a","\x85","\x58"),
	HX_HCSTRING("_sound","\x10","\xd4","\xb3","\x7c"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("insertBreakLines","\x59","\x7d","\x50","\x01"),
	HX_HCSTRING("erase","\xe6","\xe8","\x1c","\x73"),
	HX_HCSTRING("resetText","\x1c","\xd6","\xe5","\x92"),
	HX_HCSTRING("setTypingVariation","\xda","\x28","\xc2","\x7e"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onErased","\x3d","\xd7","\xdb","\x25"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("skip","\x7f","\x16","\x55","\x4c"),
	HX_HCSTRING("loadDefaultSound","\x94","\x4f","\x83","\xa2"),
	::String(null()) };

static void FlxTypeText_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypeText_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxTypeText_obj::helperString,"helperString");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypeText_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypeText_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxTypeText_obj::helperString,"helperString");
};

#endif

hx::Class FlxTypeText_obj::__mClass;

static ::String FlxTypeText_obj_sStaticFields[] = {
	HX_HCSTRING("helperString","\xdf","\xe0","\xc7","\x51"),
	::String(null())
};

void FlxTypeText_obj::__register()
{
	hx::Object *dummy = new FlxTypeText_obj;
	FlxTypeText_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.text.FlxTypeText","\x81","\xfd","\xbe","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTypeText_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxTypeText_obj::__SetStatic;
	__mClass->mMarkFunc = FlxTypeText_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTypeText_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypeText_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypeText_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypeText_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypeText_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypeText_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxTypeText_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_09182b6b580f8cf2_133_boot)
HXDLIN( 133)		helperString = HX_("",00,00,00,00);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace text
