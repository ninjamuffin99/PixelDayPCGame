// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_console__ConsoleUtil_Interp
#include <flixel/system/debug/console/_ConsoleUtil/Interp.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_87978f3c8c973553_161_new,"flixel.system.debug.console._ConsoleUtil.Interp","new",0x56cfaa5b,"flixel.system.debug.console._ConsoleUtil.Interp.new","flixel/system/debug/console/ConsoleUtil.hx",161,0x2e8bcde6)
HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_165_getGlobals,"flixel.system.debug.console._ConsoleUtil.Interp","getGlobals",0x79b1b71f,"flixel.system.debug.console._ConsoleUtil.Interp.getGlobals","flixel/system/debug/console/ConsoleUtil.hx",165,0x2e8bcde6)
HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_169_toArray,"flixel.system.debug.console._ConsoleUtil.Interp","toArray",0x1b83ad99,"flixel.system.debug.console._ConsoleUtil.Interp.toArray","flixel/system/debug/console/ConsoleUtil.hx",169,0x2e8bcde6)
HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_177_get,"flixel.system.debug.console._ConsoleUtil.Interp","get",0x56ca5a91,"flixel.system.debug.console._ConsoleUtil.Interp.get","flixel/system/debug/console/ConsoleUtil.hx",177,0x2e8bcde6)
HX_LOCAL_STACK_FRAME(_hx_pos_87978f3c8c973553_184_set,"flixel.system.debug.console._ConsoleUtil.Interp","set",0x56d3759d,"flixel.system.debug.console._ConsoleUtil.Interp.set","flixel/system/debug/console/ConsoleUtil.hx",184,0x2e8bcde6)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace console{
namespace _ConsoleUtil{

void Interp_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_87978f3c8c973553_161_new)
HXDLIN( 161)		super::__construct();
            	}

Dynamic Interp_obj::__CreateEmpty() { return new Interp_obj; }

void *Interp_obj::_hx_vtable = 0;

Dynamic Interp_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Interp_obj > _hx_result = new Interp_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Interp_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x005c6827) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x005c6827;
	} else {
		return inClassId==(int)0x044ad23d;
	}
}

::Array< ::String > Interp_obj::getGlobals(){
            	HX_STACKFRAME(&_hx_pos_87978f3c8c973553_165_getGlobals)
HXDLIN( 165)		::Array< ::String > _hx_tmp = this->toArray(this->locals->keys());
HXDLIN( 165)		return _hx_tmp->concat(this->toArray(this->variables->keys()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interp_obj,getGlobals,return )

::cpp::VirtualArray Interp_obj::toArray( ::Dynamic iterator){
            	HX_STACKFRAME(&_hx_pos_87978f3c8c973553_169_toArray)
HXLINE( 170)		::cpp::VirtualArray array = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 171)		{
HXLINE( 171)			 ::Dynamic element = iterator;
HXDLIN( 171)			while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 171)				 ::Dynamic element1 = element->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)();
HXLINE( 172)				array->push(element1);
            			}
            		}
HXLINE( 173)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interp_obj,toArray,return )

 ::Dynamic Interp_obj::get( ::Dynamic o,::String f){
            	HX_STACKFRAME(&_hx_pos_87978f3c8c973553_177_get)
HXLINE( 178)		if (hx::IsNull( o )) {
HXLINE( 179)			HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidAccess(f));
            		}
HXLINE( 180)		return ::Reflect_obj::getProperty(o,f);
            	}


 ::Dynamic Interp_obj::set( ::Dynamic o,::String f, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_87978f3c8c973553_184_set)
HXLINE( 185)		if (hx::IsNull( o )) {
HXLINE( 186)			HX_STACK_DO_THROW(::hscript::Error_obj::EInvalidAccess(f));
            		}
HXLINE( 187)		::Reflect_obj::setProperty(o,f,v);
HXLINE( 188)		return v;
            	}



hx::ObjectPtr< Interp_obj > Interp_obj::__new() {
	hx::ObjectPtr< Interp_obj > __this = new Interp_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Interp_obj > Interp_obj::__alloc(hx::Ctx *_hx_ctx) {
	Interp_obj *__this = (Interp_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Interp_obj), true, "flixel.system.debug.console._ConsoleUtil.Interp"));
	*(void **)__this = Interp_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Interp_obj::Interp_obj()
{
}

hx::Val Interp_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn() ); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getGlobals") ) { return hx::Val( getGlobals_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Interp_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Interp_obj_sStaticStorageInfo = 0;
#endif

static ::String Interp_obj_sMemberFields[] = {
	HX_HCSTRING("getGlobals","\xba","\x8b","\x9a","\x63"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null()) };

static void Interp_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Interp_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Interp_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Interp_obj::__mClass,"__mClass");
};

#endif

hx::Class Interp_obj::__mClass;

void Interp_obj::__register()
{
	hx::Object *dummy = new Interp_obj;
	Interp_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.console._ConsoleUtil.Interp","\xe9","\xe0","\xc6","\x72");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Interp_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Interp_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Interp_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Interp_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interp_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace console
} // end namespace _ConsoleUtil
