// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_BootState
#include <BootState.h>
#endif
#ifndef INCLUDED_LoginState
#include <LoginState.h>
#endif
#ifndef INCLUDED_OSOPal
#include <OSOPal.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxSpriteButton
#include <flixel/ui/FlxSpriteButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_FlxSprite
#include <flixel/ui/FlxTypedButton_flixel_FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_93f3ac5dca5ad76f_14_new,"LoginState","new",0xb18698fa,"LoginState.new","LoginState.hx",14,0xcbfd23b6)
HX_LOCAL_STACK_FRAME(_hx_pos_93f3ac5dca5ad76f_39_create,"LoginState","create",0xae947aa2,"LoginState.create","LoginState.hx",39,0xcbfd23b6)
HX_LOCAL_STACK_FRAME(_hx_pos_93f3ac5dca5ad76f_27_create,"LoginState","create",0xae947aa2,"LoginState.create","LoginState.hx",27,0xcbfd23b6)
HX_LOCAL_STACK_FRAME(_hx_pos_93f3ac5dca5ad76f_59_login,"LoginState","login",0xf2dd7c83,"LoginState.login","LoginState.hx",59,0xcbfd23b6)

void LoginState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_93f3ac5dca5ad76f_14_new)
HXDLIN(  14)		super::__construct(MaxSize);
            	}

Dynamic LoginState_obj::__CreateEmpty() { return new LoginState_obj; }

void *LoginState_obj::_hx_vtable = 0;

Dynamic LoginState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LoginState_obj > _hx_result = new LoginState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LoginState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x07be396c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x07be396c;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void LoginState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_93f3ac5dca5ad76f_39_create)
HXLINE(  39)			 ::flixel::FlxState nextState =  ::BootState_obj::__alloc( HX_CTX ,null());
HXDLIN(  39)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  39)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_93f3ac5dca5ad76f_27_create)
HXLINE(  29)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  31)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  32)		bg->loadGraphic(HX_("assets/images/OSOTitle.png",d3,02,3a,01),false,(int)320,(int)240,null(),null());
HXLINE(  33)		this->add(bg);
HXLINE(  35)		this->presents =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)16,(int)64,(int)0,HX_("ninjamuffin99 presents...",2d,85,89,55),null(),null());
HXLINE(  36)		this->presents->set_color(::OSOPal_obj::lightPink);
HXLINE(  39)		this->btnReset =  ::flixel::ui::FlxSpriteButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(), ::Dynamic(new _hx_Closure_0()));
HXLINE(  40)		this->btnReset->makeGraphic((int)16,(int)16,null(),null(),null());
HXLINE(  43)		this->btnLogin =  ::flixel::ui::FlxSpriteButton_obj::__alloc( HX_CTX ,(int)200,(int)100,null(),this->login_dyn());
HXLINE(  44)		this->btnLogin->makeGraphic((int)64,(int)32,(int)0,null(),null());
HXLINE(  45)		this->add(this->btnLogin);
HXLINE(  47)		this->userName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,this->btnLogin->x,this->btnLogin->y,(int)0,HX_("Admin",6f,1c,78,af),(int)16,null());
HXLINE(  48)		this->userName->set_color(::OSOPal_obj::lightPurple);
HXLINE(  49)		this->add(this->userName);
HXLINE(  51)		Float _hx_tmp = this->userName->x;
HXDLIN(  51)		this->lastLogin =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp,(this->userName->y + (int)18),(int)0,HX_("last login: 09/13/1999",d4,5f,bc,a9),null(),null());
HXLINE(  52)		this->add(this->lastLogin);
HXLINE(  54)		this->super::create();
            	}


void LoginState_obj::login(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_93f3ac5dca5ad76f_59_login)
HXDLIN(  59)			 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null());
HXDLIN(  59)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN(  59)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_93f3ac5dca5ad76f_59_login)
HXDLIN(  59)		::flixel::FlxG_obj::camera->fade((int)-16777216,(int)1,false, ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(LoginState_obj,login,(void))


hx::ObjectPtr< LoginState_obj > LoginState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< LoginState_obj > __this = new LoginState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< LoginState_obj > LoginState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	LoginState_obj *__this = (LoginState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(LoginState_obj), true, "LoginState"));
	*(void **)__this = LoginState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

LoginState_obj::LoginState_obj()
{
}

void LoginState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LoginState);
	HX_MARK_MEMBER_NAME(btnShutDown,"btnShutDown");
	HX_MARK_MEMBER_NAME(btnReset,"btnReset");
	HX_MARK_MEMBER_NAME(btnLogin,"btnLogin");
	HX_MARK_MEMBER_NAME(userName,"userName");
	HX_MARK_MEMBER_NAME(lastLogin,"lastLogin");
	HX_MARK_MEMBER_NAME(presents,"presents");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LoginState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(btnShutDown,"btnShutDown");
	HX_VISIT_MEMBER_NAME(btnReset,"btnReset");
	HX_VISIT_MEMBER_NAME(btnLogin,"btnLogin");
	HX_VISIT_MEMBER_NAME(userName,"userName");
	HX_VISIT_MEMBER_NAME(lastLogin,"lastLogin");
	HX_VISIT_MEMBER_NAME(presents,"presents");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val LoginState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"login") ) { return hx::Val( login_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"btnReset") ) { return hx::Val( btnReset ); }
		if (HX_FIELD_EQ(inName,"btnLogin") ) { return hx::Val( btnLogin ); }
		if (HX_FIELD_EQ(inName,"userName") ) { return hx::Val( userName ); }
		if (HX_FIELD_EQ(inName,"presents") ) { return hx::Val( presents ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastLogin") ) { return hx::Val( lastLogin ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"btnShutDown") ) { return hx::Val( btnShutDown ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LoginState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"btnReset") ) { btnReset=inValue.Cast<  ::flixel::ui::FlxSpriteButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"btnLogin") ) { btnLogin=inValue.Cast<  ::flixel::ui::FlxSpriteButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"userName") ) { userName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"presents") ) { presents=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastLogin") ) { lastLogin=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"btnShutDown") ) { btnShutDown=inValue.Cast<  ::flixel::ui::FlxSpriteButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LoginState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("btnShutDown","\x32","\x63","\x35","\x4a"));
	outFields->push(HX_HCSTRING("btnReset","\xd3","\xe9","\x40","\x32"));
	outFields->push(HX_HCSTRING("btnLogin","\x6d","\x79","\x6c","\xc4"));
	outFields->push(HX_HCSTRING("userName","\x36","\xb2","\xc4","\x0b"));
	outFields->push(HX_HCSTRING("lastLogin","\x33","\x07","\xa1","\xc5"));
	outFields->push(HX_HCSTRING("presents","\x18","\x61","\xd7","\x66"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LoginState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::ui::FlxSpriteButton*/ ,(int)offsetof(LoginState_obj,btnShutDown),HX_HCSTRING("btnShutDown","\x32","\x63","\x35","\x4a")},
	{hx::fsObject /*::flixel::ui::FlxSpriteButton*/ ,(int)offsetof(LoginState_obj,btnReset),HX_HCSTRING("btnReset","\xd3","\xe9","\x40","\x32")},
	{hx::fsObject /*::flixel::ui::FlxSpriteButton*/ ,(int)offsetof(LoginState_obj,btnLogin),HX_HCSTRING("btnLogin","\x6d","\x79","\x6c","\xc4")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(LoginState_obj,userName),HX_HCSTRING("userName","\x36","\xb2","\xc4","\x0b")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(LoginState_obj,lastLogin),HX_HCSTRING("lastLogin","\x33","\x07","\xa1","\xc5")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(LoginState_obj,presents),HX_HCSTRING("presents","\x18","\x61","\xd7","\x66")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LoginState_obj_sStaticStorageInfo = 0;
#endif

static ::String LoginState_obj_sMemberFields[] = {
	HX_HCSTRING("btnShutDown","\x32","\x63","\x35","\x4a"),
	HX_HCSTRING("btnReset","\xd3","\xe9","\x40","\x32"),
	HX_HCSTRING("btnLogin","\x6d","\x79","\x6c","\xc4"),
	HX_HCSTRING("userName","\x36","\xb2","\xc4","\x0b"),
	HX_HCSTRING("lastLogin","\x33","\x07","\xa1","\xc5"),
	HX_HCSTRING("presents","\x18","\x61","\xd7","\x66"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("login","\x69","\xd9","\xf3","\x78"),
	::String(null()) };

static void LoginState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LoginState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LoginState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LoginState_obj::__mClass,"__mClass");
};

#endif

hx::Class LoginState_obj::__mClass;

void LoginState_obj::__register()
{
	hx::Object *dummy = new LoginState_obj;
	LoginState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("LoginState","\x08","\x54","\xdc","\xb0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LoginState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LoginState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LoginState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LoginState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoginState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoginState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

