// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_ErrorWindow
#include <ErrorWindow.h>
#endif
#ifndef INCLUDED_Window
#include <Window.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8658baec45d92afa_16_new,"ErrorWindow","new",0x832f4eaa,"ErrorWindow.new","ErrorWindow.hx",16,0x8932b406)
HX_LOCAL_STACK_FRAME(_hx_pos_8658baec45d92afa_27_updateText,"ErrorWindow","updateText",0xc0f3f64c,"ErrorWindow.updateText","ErrorWindow.hx",27,0x8932b406)

void ErrorWindow_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
int width = __o_width.Default(150);
int height = __o_height.Default(100);
::String name = __o_name.Default(HX_HCSTRING("UNEXPECTED ERROR","\x19","\xcc","\xd3","\xff"));
int color = __o_color.Default(-16777216);
            	HX_GC_STACKFRAME(&_hx_pos_8658baec45d92afa_16_new)
HXLINE(  17)		super::__construct(X,Y,width,height,name,color);
HXLINE(  19)		this->errorText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)12,((Float)height / (Float)(int)5),(width - (int)12),HX_("AN UNEXPECTED ERROR HAS OCCURED",d1,2f,42,2a),(int)8,null());
HXLINE(  20)		 ::flixel::text::FlxText _hx_tmp = this->errorText;
HXDLIN(  20)		_hx_tmp->set_color(::flixel::util::_FlxColor::FlxColor_Impl__obj::getDarkened(this->title->color,null()));
HXLINE(  21)		this->add(this->errorText);
            	}

Dynamic ErrorWindow_obj::__CreateEmpty() { return new ErrorWindow_obj; }

void *ErrorWindow_obj::_hx_vtable = 0;

Dynamic ErrorWindow_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ErrorWindow_obj > _hx_result = new ErrorWindow_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool ErrorWindow_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x252c71b8) {
		if (inClassId<=(int)0x0b6ffd77) {
			if (inClassId<=(int)0x03e5ced8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x03e5ced8;
			} else {
				return inClassId==(int)0x0b6ffd77;
			}
		} else {
			return inClassId==(int)0x252c71b8;
		}
	} else {
		if (inClassId<=(int)0x282173df) {
			return inClassId==(int)0x25a685e0 || inClassId==(int)0x282173df;
		} else {
			return inClassId==(int)0x2e105115;
		}
	}
}

void ErrorWindow_obj::updateText(::String text){
            	HX_STACKFRAME(&_hx_pos_8658baec45d92afa_27_updateText)
HXDLIN(  27)		this->errorText->set_text(text);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ErrorWindow_obj,updateText,(void))


hx::ObjectPtr< ErrorWindow_obj > ErrorWindow_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color) {
	hx::ObjectPtr< ErrorWindow_obj > __this = new ErrorWindow_obj();
	__this->__construct(__o_X,__o_Y,__o_width,__o_height,__o_name,__o_color);
	return __this;
}

hx::ObjectPtr< ErrorWindow_obj > ErrorWindow_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< int >  __o_width,hx::Null< int >  __o_height,::String __o_name,hx::Null< int >  __o_color) {
	ErrorWindow_obj *__this = (ErrorWindow_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ErrorWindow_obj), true, "ErrorWindow"));
	*(void **)__this = ErrorWindow_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,__o_width,__o_height,__o_name,__o_color);
	return __this;
}

ErrorWindow_obj::ErrorWindow_obj()
{
}

void ErrorWindow_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ErrorWindow);
	HX_MARK_MEMBER_NAME(errorText,"errorText");
	 ::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ErrorWindow_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(errorText,"errorText");
	 ::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ErrorWindow_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"errorText") ) { return hx::Val( errorText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"updateText") ) { return hx::Val( updateText_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ErrorWindow_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"errorText") ) { errorText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ErrorWindow_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("errorText","\x95","\x48","\x62","\x73"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ErrorWindow_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(ErrorWindow_obj,errorText),HX_HCSTRING("errorText","\x95","\x48","\x62","\x73")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ErrorWindow_obj_sStaticStorageInfo = 0;
#endif

static ::String ErrorWindow_obj_sMemberFields[] = {
	HX_HCSTRING("errorText","\x95","\x48","\x62","\x73"),
	HX_HCSTRING("updateText","\x56","\xb7","\xae","\x05"),
	::String(null()) };

static void ErrorWindow_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ErrorWindow_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ErrorWindow_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ErrorWindow_obj::__mClass,"__mClass");
};

#endif

hx::Class ErrorWindow_obj::__mClass;

void ErrorWindow_obj::__register()
{
	hx::Object *dummy = new ErrorWindow_obj;
	ErrorWindow_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ErrorWindow","\xb8","\x71","\x2c","\x25");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ErrorWindow_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ErrorWindow_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ErrorWindow_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ErrorWindow_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ErrorWindow_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ErrorWindow_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

