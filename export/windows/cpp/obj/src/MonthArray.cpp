// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_MonthArray
#include <MonthArray.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_759bc4cb3b320afc_11_boot,"MonthArray","boot",0x71e03e67,"MonthArray.boot","MonthArray.hx",11,0x7952ae05)
static const ::String _hx_array_data_0653d259_1[] = {
	HX_("",00,00,00,00),HX_("Jan",b7,7b,38,00),HX_("Feb",23,76,35,00),HX_("March",a3,34,4f,96),HX_("April",26,77,6a,b7),HX_("May",85,c2,3a,00),HX_("June",e2,f1,42,31),HX_("July",38,f0,42,31),HX_("August",63,79,82,9f),HX_("Sept",36,bb,29,37),HX_("Oct",c0,48,3c,00),HX_("Nov",f5,90,3b,00),HX_("Dec",a2,f1,33,00),
};

void MonthArray_obj::__construct() { }

Dynamic MonthArray_obj::__CreateEmpty() { return new MonthArray_obj; }

void *MonthArray_obj::_hx_vtable = 0;

Dynamic MonthArray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MonthArray_obj > _hx_result = new MonthArray_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MonthArray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0653d259;
}

::Array< ::String > MonthArray_obj::months;


MonthArray_obj::MonthArray_obj()
{
}

bool MonthArray_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"months") ) { outValue = ( months ); return true; }
	}
	return false;
}

bool MonthArray_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"months") ) { months=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MonthArray_obj_sMemberStorageInfo = 0;
static hx::StaticInfo MonthArray_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &MonthArray_obj::months,HX_HCSTRING("months","\x33","\x91","\x6e","\xc7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void MonthArray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MonthArray_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MonthArray_obj::months,"months");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MonthArray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MonthArray_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MonthArray_obj::months,"months");
};

#endif

hx::Class MonthArray_obj::__mClass;

static ::String MonthArray_obj_sStaticFields[] = {
	HX_HCSTRING("months","\x33","\x91","\x6e","\xc7"),
	::String(null())
};

void MonthArray_obj::__register()
{
	hx::Object *dummy = new MonthArray_obj;
	MonthArray_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("MonthArray","\x59","\xd2","\x53","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MonthArray_obj::__GetStatic;
	__mClass->mSetStaticField = &MonthArray_obj::__SetStatic;
	__mClass->mMarkFunc = MonthArray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MonthArray_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MonthArray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MonthArray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MonthArray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MonthArray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MonthArray_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_759bc4cb3b320afc_11_boot)
HXDLIN(  11)		months = ::Array_obj< ::String >::fromData( _hx_array_data_0653d259_1,13);
            	}
}

