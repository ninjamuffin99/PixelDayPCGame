// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_BSOD
#include <BSOD.h>
#endif
#ifndef INCLUDED_BootState
#include <BootState.h>
#endif
#ifndef INCLUDED_LoginState
#include <LoginState.h>
#endif
#ifndef INCLUDED_SaveData
#include <SaveData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2ada4b8a70d27e2c_12_new,"BootState","new",0x382c88d1,"BootState.new","BootState.hx",12,0x028c3bbf)
static const ::String _hx_array_data_af89cc5f_1[] = {
	HX_("Loading Dependancies",d1,9e,41,53),HX_("Abstracting Low Level APIs",21,fa,9b,5f),HX_("Linking graphics processor",d5,b5,b2,6b),HX_("Compiling hard drive",e5,fe,7d,78),HX_("Defragging hard drive",47,4b,4d,4e),HX_("WARNING- HDD CORRUPTED",05,c7,d6,88),HX_("Initializing Compatibility Mode",26,ef,c8,5d),HX_("Loading OS",68,f8,01,0d),HX_("Initializing GUI",68,33,a0,64),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2ada4b8a70d27e2c_20_create,"BootState","create",0xa52acb2b,"BootState.create","BootState.hx",20,0x028c3bbf)
HX_LOCAL_STACK_FRAME(_hx_pos_2ada4b8a70d27e2c_37_update,"BootState","update",0xb020ea38,"BootState.update","BootState.hx",37,0x028c3bbf)
HX_LOCAL_STACK_FRAME(_hx_pos_2ada4b8a70d27e2c_60_addText,"BootState","addText",0x5813545f,"BootState.addText","BootState.hx",60,0x028c3bbf)

void BootState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_2ada4b8a70d27e2c_12_new)
HXLINE(  17)		this->bootTexts = ::Array_obj< ::String >::fromData( _hx_array_data_af89cc5f_1,9);
HXLINE(  15)		this->timer = ((Float)4);
HXLINE(  12)		super::__construct(MaxSize);
            	}

Dynamic BootState_obj::__CreateEmpty() { return new BootState_obj; }

void *BootState_obj::_hx_vtable = 0;

Dynamic BootState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BootState_obj > _hx_result = new BootState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BootState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x06ce45b3) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x06ce45b3;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void BootState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_2ada4b8a70d27e2c_20_create)
HXLINE(  21)		::flixel::FlxG_obj::mouse->load(HX_("assets/images/cursorBW.png",11,65,8d,40),(int)2,null(),null());
HXLINE(  22)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  24)		::flixel::FlxG_obj::save->bind(HX_("File",9c,fa,94,2e));
HXLINE(  25)		::SaveData_obj::load();
HXLINE(  27)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/sounds/pcAmbience.mp3",72,8e,77,1c),null(),null(),null());
HXLINE(  28)		::flixel::FlxG_obj::sound->music->loopTime = (int)3500;
HXLINE(  30)		this->printing =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)2,(int)2,(int)0,HX_("FlixOS 1.8.30 \n(c) 1997-1999 Newgrounds inc. \n\"Everything, by Everyone!\" All Rights Reserved \nSource code: github.com/ninjamuffin99/PixelDayPCGame\n(Source code out of date)\nInitializing RAM",1f,dd,77,e7),(int)8,null());
HXLINE(  31)		this->add(this->printing);
HXLINE(  33)		this->super::create();
            	}


void BootState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_2ada4b8a70d27e2c_37_update)
HXLINE(  38)		this->super::update(elapsed);
HXLINE(  40)		if ((this->timer > (int)0)) {
HXLINE(  42)			 ::BootState _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  42)			_hx_tmp->timer = (_hx_tmp->timer - ::flixel::FlxG_obj::elapsed);
            		}
            		else {
HXLINE(  46)			 ::BootState _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  46)			Float _hx_tmp2 = _hx_tmp1->timer;
HXDLIN(  46)			_hx_tmp1->timer = (_hx_tmp2 + ::flixel::FlxG_obj::random->_hx_float((int)0,(int)4,null()));
HXLINE(  47)			this->addText();
            		}
HXLINE(  51)		if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE(  53)			 ::flixel::FlxState nextState =  ::LoginState_obj::__alloc( HX_CTX ,null());
HXDLIN(  53)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  53)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


void BootState_obj::addText(){
            	HX_GC_STACKFRAME(&_hx_pos_2ada4b8a70d27e2c_60_addText)
HXLINE(  61)		if ((this->bootTexts->length == (int)0)) {
HXLINE(  63)			if (::SaveData_obj::bsod) {
HXLINE(  65)				 ::flixel::FlxState nextState =  ::BSOD_obj::__alloc( HX_CTX ,null());
HXDLIN(  65)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  65)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			else {
HXLINE(  69)				 ::flixel::FlxState nextState1 =  ::LoginState_obj::__alloc( HX_CTX ,null());
HXDLIN(  69)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE(  69)					::flixel::FlxG_obj::game->_requestedState = nextState1;
            				}
            			}
            		}
HXLINE(  74)		{
HXLINE(  74)			 ::flixel::text::FlxText _g = this->printing;
HXDLIN(  74)			_g->set_text((_g->text + HX_(" -- Complete\n",71,4c,29,e8)));
            		}
HXLINE(  75)		{
HXLINE(  75)			 ::flixel::text::FlxText _g1 = this->printing;
HXDLIN(  75)			::String _g2 = _g1->text;
HXDLIN(  75)			_g1->set_text((_g2 + this->bootTexts->__get((int)0)));
            		}
HXLINE(  76)		::Array< ::String > _hx_tmp = this->bootTexts;
HXDLIN(  76)		_hx_tmp->remove(this->bootTexts->__get((int)0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BootState_obj,addText,(void))


hx::ObjectPtr< BootState_obj > BootState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< BootState_obj > __this = new BootState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< BootState_obj > BootState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	BootState_obj *__this = (BootState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BootState_obj), true, "BootState"));
	*(void **)__this = BootState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

BootState_obj::BootState_obj()
{
}

void BootState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BootState);
	HX_MARK_MEMBER_NAME(printing,"printing");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(bootTexts,"bootTexts");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BootState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(printing,"printing");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(bootTexts,"bootTexts");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BootState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addText") ) { return hx::Val( addText_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"printing") ) { return hx::Val( printing ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bootTexts") ) { return hx::Val( bootTexts ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BootState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"printing") ) { printing=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"bootTexts") ) { bootTexts=inValue.Cast< ::Array< ::String > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BootState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("printing","\xd5","\x4e","\x2a","\x29"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("bootTexts","\x94","\xc1","\x44","\x97"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BootState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(BootState_obj,printing),HX_HCSTRING("printing","\xd5","\x4e","\x2a","\x29")},
	{hx::fsFloat,(int)offsetof(BootState_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(BootState_obj,bootTexts),HX_HCSTRING("bootTexts","\x94","\xc1","\x44","\x97")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BootState_obj_sStaticStorageInfo = 0;
#endif

static ::String BootState_obj_sMemberFields[] = {
	HX_HCSTRING("printing","\xd5","\x4e","\x2a","\x29"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("bootTexts","\x94","\xc1","\x44","\x97"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("addText","\x6e","\x0f","\x37","\x89"),
	::String(null()) };

static void BootState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BootState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BootState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BootState_obj::__mClass,"__mClass");
};

#endif

hx::Class BootState_obj::__mClass;

void BootState_obj::__register()
{
	hx::Object *dummy = new BootState_obj;
	BootState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("BootState","\x5f","\xcc","\x89","\xaf");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BootState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BootState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BootState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BootState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BootState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BootState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

