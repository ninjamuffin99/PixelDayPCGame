// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_BSOD
#include <BSOD.h>
#endif
#ifndef INCLUDED_OSOPal
#include <OSOPal.h>
#endif
#ifndef INCLUDED_SaveData
#include <SaveData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c26e06e89b99cc2_12_new,"BSOD","new",0x16a38118,"BSOD.new","BSOD.hx",12,0x91e52958)
HX_LOCAL_STACK_FRAME(_hx_pos_9c26e06e89b99cc2_16_create,"BSOD","create",0xd04cf944,"BSOD.create","BSOD.hx",16,0x91e52958)

void BSOD_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_9c26e06e89b99cc2_12_new)
HXDLIN(  12)		super::__construct(MaxSize);
            	}

Dynamic BSOD_obj::__CreateEmpty() { return new BSOD_obj; }

void *BSOD_obj::_hx_vtable = 0;

Dynamic BSOD_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BSOD_obj > _hx_result = new BSOD_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BSOD_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2bdf5526 || inClassId==(int)0x3634c52c;
	}
}

void BSOD_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_9c26e06e89b99cc2_16_create)
HXLINE(  17)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  18)		bg->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,::OSOPal_obj::lightPurple,null(),null());
HXLINE(  19)		this->add(bg);
HXLINE(  21)		 ::flixel::text::FlxText bsodText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)20,(int)0,HX_("UH OH\nFlixOS HAS HIT A CRITICAL ERROR\nTHIS ERROR MAY BE UNRECOVERABLE\nPLEASE TAKE YOUR COMPUTER TO YOUR NEAREST SPECIALIST\nERROR CODE: 0XFSSFJE:EF39039F:FKD-CRITICAL",9d,e0,9a,7c),(int)8,null());
HXLINE(  22)		bsodText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  23)		bsodText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  24)		this->add(bsodText);
HXLINE(  26)		::SaveData_obj::bsod = true;
HXLINE(  27)		::SaveData_obj::save();
HXLINE(  30)		this->super::create();
            	}



hx::ObjectPtr< BSOD_obj > BSOD_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< BSOD_obj > __this = new BSOD_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< BSOD_obj > BSOD_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	BSOD_obj *__this = (BSOD_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BSOD_obj), true, "BSOD"));
	*(void **)__this = BSOD_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

BSOD_obj::BSOD_obj()
{
}

hx::Val BSOD_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BSOD_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *BSOD_obj_sStaticStorageInfo = 0;
#endif

static ::String BSOD_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	::String(null()) };

static void BSOD_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BSOD_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BSOD_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BSOD_obj::__mClass,"__mClass");
};

#endif

hx::Class BSOD_obj::__mClass;

void BSOD_obj::__register()
{
	hx::Object *dummy = new BSOD_obj;
	BSOD_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("BSOD","\x26","\x55","\xdf","\x2b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BSOD_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BSOD_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BSOD_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BSOD_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BSOD_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BSOD_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

