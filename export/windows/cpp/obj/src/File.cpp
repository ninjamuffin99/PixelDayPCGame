// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_File
#include <File.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxSpriteButton
#include <flixel/ui/FlxSpriteButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_FlxSprite
#include <flixel/ui/FlxTypedButton_flixel_FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_30_new,"File","new",0x26d8198e,"File.new","File.hx",30,0xcc83d1a2)
HX_LOCAL_STACK_FRAME(_hx_pos_0bfe5751cf1e51a3_51_update,"File","update",0xa9fcad9b,"File.update","File.hx",51,0xcc83d1a2)

void File_obj::__construct(Float X,int Y, ::Dynamic iconGraphic, ::Dynamic OnClick,::String __o_text,hx::Null< int >  __o_color){
::String text = __o_text.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
int color = __o_color.Default(-65536);
            	HX_GC_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_30_new)
HXLINE(  31)		super::__construct(null(),null(),null());
HXLINE(  32)		this->set_x(X);
HXLINE(  33)		this->set_y(Y);
HXLINE(  35)		this->icon =  ::flixel::ui::FlxSpriteButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),OnClick);
HXLINE(  36)		if (hx::IsNotNull( iconGraphic )) {
HXLINE(  38)			this->icon->loadGraphic(iconGraphic,null(),null(),null(),null(),null());
HXLINE(  39)			this->icon->setGraphicSize((int)16,(int)16);
HXLINE(  40)			this->icon->updateHitbox();
            		}
HXLINE(  43)		this->add(this->icon);
HXLINE(  45)		this->fileName =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)18,(int)2,(int)0,text,(int)8,null());
HXLINE(  46)		this->fileName->set_color(color);
HXLINE(  47)		this->add(this->fileName);
            	}

Dynamic File_obj::__CreateEmpty() { return new File_obj; }

void *File_obj::_hx_vtable = 0;

Dynamic File_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< File_obj > _hx_result = new File_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool File_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x282173df) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x282173df;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x2e94fa9c;
	}
}

void File_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_0bfe5751cf1e51a3_51_update)
HXLINE(  52)		this->super::update(elapsed);
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		if (::flixel::FlxG_obj::mouse->overlaps(this->icon,null())) {
HXLINE(  54)			 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(  54)			if ((_this->current != (int)1)) {
HXLINE(  54)				_hx_tmp = (_this->current == (int)2);
            			}
            			else {
HXLINE(  54)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(  54)			_hx_tmp = false;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  56)			 ::flixel::FlxSprite _hx_tmp1 = this->icon;
HXDLIN(  56)			_hx_tmp1->set_y((this->y + (int)1));
            		}
            		else {
HXLINE(  59)			this->icon->set_y(this->y);
            		}
            	}



hx::ObjectPtr< File_obj > File_obj::__new(Float X,int Y, ::Dynamic iconGraphic, ::Dynamic OnClick,::String __o_text,hx::Null< int >  __o_color) {
	hx::ObjectPtr< File_obj > __this = new File_obj();
	__this->__construct(X,Y,iconGraphic,OnClick,__o_text,__o_color);
	return __this;
}

hx::ObjectPtr< File_obj > File_obj::__alloc(hx::Ctx *_hx_ctx,Float X,int Y, ::Dynamic iconGraphic, ::Dynamic OnClick,::String __o_text,hx::Null< int >  __o_color) {
	File_obj *__this = (File_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(File_obj), true, "File"));
	*(void **)__this = File_obj::_hx_vtable;
	__this->__construct(X,Y,iconGraphic,OnClick,__o_text,__o_color);
	return __this;
}

File_obj::File_obj()
{
}

void File_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(File);
	HX_MARK_MEMBER_NAME(icon,"icon");
	HX_MARK_MEMBER_NAME(fileName,"fileName");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void File_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(icon,"icon");
	HX_VISIT_MEMBER_NAME(fileName,"fileName");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val File_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { return hx::Val( icon ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { return hx::Val( fileName ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val File_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"icon") ) { icon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fileName") ) { fileName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void File_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"));
	outFields->push(HX_HCSTRING("fileName","\xe7","\x5a","\x43","\x62"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo File_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(File_obj,icon),HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(File_obj,fileName),HX_HCSTRING("fileName","\xe7","\x5a","\x43","\x62")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *File_obj_sStaticStorageInfo = 0;
#endif

static ::String File_obj_sMemberFields[] = {
	HX_HCSTRING("icon","\x79","\xe7","\xb2","\x45"),
	HX_HCSTRING("fileName","\xe7","\x5a","\x43","\x62"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void File_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(File_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void File_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(File_obj::__mClass,"__mClass");
};

#endif

hx::Class File_obj::__mClass;

void File_obj::__register()
{
	hx::Object *dummy = new File_obj;
	File_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("File","\x9c","\xfa","\x94","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = File_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(File_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< File_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = File_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = File_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = File_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

