// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_TaskbarButton
#include <TaskbarButton.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxSpriteButton
#include <flixel/ui/FlxSpriteButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_FlxSprite
#include <flixel/ui/FlxTypedButton_flixel_FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_168d7f4fc773d95f_16_new,"TaskbarButton","new",0x51895912,"TaskbarButton.new","TaskbarButton.hx",16,0xfcebee9e)

void TaskbarButton_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic maxButton){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_168d7f4fc773d95f_16_new)
HXLINE(  17)		super::__construct(null(),null(),null());
HXLINE(  18)		this->set_x(X);
HXLINE(  19)		this->set_y(Y);
HXLINE(  21)		this->taskBtn =  ::flixel::ui::FlxSpriteButton_obj::__alloc( HX_CTX ,(int)0,(int)0,null(),maxButton);
HXLINE(  22)		this->taskBtn->makeGraphic((int)16,(int)16,(int)-65536,null(),null());
HXLINE(  23)		this->add(this->taskBtn);
            	}

Dynamic TaskbarButton_obj::__CreateEmpty() { return new TaskbarButton_obj; }

void *TaskbarButton_obj::_hx_vtable = 0;

Dynamic TaskbarButton_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TaskbarButton_obj > _hx_result = new TaskbarButton_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool TaskbarButton_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0f472820) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x0f472820;
			}
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x282173df || inClassId==(int)0x2e105115;
	}
}


hx::ObjectPtr< TaskbarButton_obj > TaskbarButton_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic maxButton) {
	hx::ObjectPtr< TaskbarButton_obj > __this = new TaskbarButton_obj();
	__this->__construct(__o_X,__o_Y,maxButton);
	return __this;
}

hx::ObjectPtr< TaskbarButton_obj > TaskbarButton_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y, ::Dynamic maxButton) {
	TaskbarButton_obj *__this = (TaskbarButton_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TaskbarButton_obj), true, "TaskbarButton"));
	*(void **)__this = TaskbarButton_obj::_hx_vtable;
	__this->__construct(__o_X,__o_Y,maxButton);
	return __this;
}

TaskbarButton_obj::TaskbarButton_obj()
{
}

void TaskbarButton_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TaskbarButton);
	HX_MARK_MEMBER_NAME(taskBtn,"taskBtn");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TaskbarButton_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(taskBtn,"taskBtn");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TaskbarButton_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"taskBtn") ) { return hx::Val( taskBtn ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TaskbarButton_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"taskBtn") ) { taskBtn=inValue.Cast<  ::flixel::ui::FlxSpriteButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TaskbarButton_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("taskBtn","\x17","\xd4","\x58","\x1e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TaskbarButton_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::ui::FlxSpriteButton*/ ,(int)offsetof(TaskbarButton_obj,taskBtn),HX_HCSTRING("taskBtn","\x17","\xd4","\x58","\x1e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TaskbarButton_obj_sStaticStorageInfo = 0;
#endif

static ::String TaskbarButton_obj_sMemberFields[] = {
	HX_HCSTRING("taskBtn","\x17","\xd4","\x58","\x1e"),
	::String(null()) };

static void TaskbarButton_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TaskbarButton_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TaskbarButton_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TaskbarButton_obj::__mClass,"__mClass");
};

#endif

hx::Class TaskbarButton_obj::__mClass;

void TaskbarButton_obj::__register()
{
	hx::Object *dummy = new TaskbarButton_obj;
	TaskbarButton_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("TaskbarButton","\x20","\x28","\x47","\x0f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TaskbarButton_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TaskbarButton_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TaskbarButton_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TaskbarButton_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TaskbarButton_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TaskbarButton_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

